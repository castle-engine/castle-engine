#X3D V3.2 utf8
PROFILE Interactive

# This file defines the complete 3D model of the level.
#
# - The basic level geometry,
#   and non-collidable water,
#   and lights,
#   are exported from Blender as one glTF file (example_level.gltf).
#   It is used (by "Inline" node) here.
# - This file also adds some additional nodes,
#   to define information that cannot be expressed in Blender.
#
# We use X3D nodes, writing them in "classic encoding" in this file.
# See https://castle-engine.io/vrml_x3d.php for information about X3D nodes.

# You can embed one 3D file within another using the "Inline" node,
# this way example_level_final.x3dv contains
# the example_level.gltf (generated by Blender) + some of our customizations.
Inline { url "example_level.gltf" }

# Defines various information about avatar (player).
NavigationInfo {
  headlight FALSE
  type "WALK"

  # avatarSize is a list of floats:
  #
  # - collision sphere radius (Camera.Radius in our engine).
  #   If this is not specified (or zero), we will automatically calculate
  #   something hopefully sensible based on level size.
  #
  # - height above the terrain, used only when gravity works
  #   (Camera.PreferredHeight in our engine).
  #   If this is not specified, we will automatically calculate it based
  #   on Camera.Radius, and we always correct it (as this must be > Camera.Radius
  #   for things to work sensibly, preferably > Camera.Radius * 2 to also work
  #   with crouching, head bobbing etc.)
  #
  # - (not specified here) tallest object that you can climb, like a stair step
  #   (Camera.ClimbHeight in our engine).
  #   If not specified (or zero), there is no such limit, and you can climb
  #   very steep (but not vertical) slopes.
  avatarSize [ 0.5, 2 ]

  # speed is in units per second. This is Camera.MoveSpeed in our engine.
  speed 10
}

# Viewpoint defines initial player position/orientation when starting the level.
# I usually define it by navigating in castle-model-viewer and then using castle-model-viewer
# "Console -> Print Current Camera (Viewpoint) (VRML 2.0, X3D classic)".
# But you could also define it by setting camera in Blender
# (make sure in this case that you copy the Viewpoint node to this file,
# as bindable nodes like Viewpoint/NavigationInfo are ignored in Inline files).
#
# Generated by castle-model-viewer.
# Use castle-model-viewer "Clipboard -> Print Current Camera..." to generate X3D code like below.
# Camera settings "encoded" in the X3D declaration below :
#   position 16.83 2.07 -3.81
#   direction -0.63 0.00 -0.77
#   up 0.00 1.00 0.00
#   gravityUp 0.00 1.00 0.00
Viewpoint {
  position 16.827529907226563 2.0736739635467529 -3.8136968612670898
  orientation -6.9152335413491528E-8 1.0000001192092896 0 0.68426263332366943
}

# Textured background.
Transform {
  rotation 0 1 0 3.14
  children Background {
    backUrl "sky/sky_back.png"
    bottomUrl "sky/sky_bottom.png"
    frontUrl "sky/sky_front.png"
    leftUrl "sky/sky_left.png"
    rightUrl "sky/sky_right.png"
    topUrl "sky/sky_top.png"
  }
}

# Examples how to add a light source that casts shadows.
# SpotLight {
#   location 0 55 44
#   direction 0 -1 0
#   cutOffAngle 1
#
#   # Uncomment lines below to get shadow by shadow maps.
#   # See https://castle-engine.io/x3d_extensions_shadow_maps.php
#   # for a full documentation.
#   # In a very trivial cases, it's enough to just say "shadows TRUE",
#   # although you may want to adjust other settings.
#
#   # projectionNear 40
#   # projectionFar 60
#   # shadows TRUE
#   # defaultShadowMap GeneratedShadowMap {
#   #   size 4096
#   #   update "ALWAYS"
#   #   bias 4
#   #   scale 4
#   # }
#
#   # Uncomment lines below to get shadow by shadow volumes.
#   # See https://castle-engine.io/x3d_extensions.php#section_ext_shadows .
#   # There are advantages and disadvantages to both shadow approaches.
#   # Also our shadow volumes implementation is a little limited now: only 1 light.
#   # Only 2-manifold objects cast shadows by shadow volumes, which include
#   # only medkit item right now.
#
#   # shadowVolumesMain TRUE
#   # shadowVolumes TRUE
# }

# Just a test that VRML/X3D events, touch sensors, and CastleScript work fine inside a level.
# Transform {
#   translation 0 10 0
#   scale 0.5 0.5 0.5
#   children Inline { url "../../../../../demo-models/sensors_pointing_device/touch_sensor_tests.x3dv" }
# }
# Transform {
#   rotation 1 0 0 -1.5707963705062866
#   translation 10 10 0
#   scale 0.5 0.5 0.5
#   children Inline { url "../../../../../demo-models/castle_script/particles.x3dv" }
# }
