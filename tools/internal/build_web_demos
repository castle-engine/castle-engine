#!/bin/bash
set -eu

# ------------------------------------------------------------------------
# Rebuild all web demos linked from https://castle-engine.io/web .
# Copies their output to the (local) cge-www repository.
#
# After executing this, to update website:
#
# - update binaries outside of GIT:
#   rsync -av ~/sources/castle-engine/cge-www/htdocs/web-demos/ castle-engine.io:/home/michalis/cge-www/htdocs/web-demos
#   ssh castle-engine.io
#     ~/bin/purge_cache.sh
#
# - not necessary anymore (web-demos in cge-www/.gitignore):
#   update things tracked in GIT:
#   commit + push in cge-www
#   ssh castle-engine.io
#     ~/bin/www_synchronize_noimages.sh
# ------------------------------------------------------------------------

CGE_WWW_DEMOS="${CASTLE_ENGINE_PATH}/../cge-www/htdocs/web-demos"

# define $FIND, we want GNU find
FIND='find'
if which cygpath.exe > /dev/null; then
  # On Cygwin/MSYS2, make sure to use Cygwin/MSYS2's find, not the one from Windows
  FIND='/bin/find'
fi
if [ "`uname -s`" '=' 'Darwin' ]; then
  FIND='gfind'
fi

# Rebuild and copy project for web.
#
# $1 is project's absolute directory.
#
# $2 is subdirectory within cge-www/.../web-demos/ .
do_project_any ()
{
  local PROJECT_FULL_DIR="$1"
  local PROJECT_SUBDIR="$2"
  shift 2

  cd "${PROJECT_FULL_DIR}"
  castle-engine clean
  castle-engine compile --target=web --mode=release

  CGE_WWW_DIST="${CGE_WWW_DEMOS}/${PROJECT_SUBDIR}"
  rm -Rf "${CGE_WWW_DIST}"
  mkdir -p "${CGE_WWW_DIST}"
  cp -R castle-engine-output/web/dist/* "${CGE_WWW_DIST}"
}

# Rebuild and copy project $1, that is inside CGE.
#
# $1 should be a directory in CGE, like examples/web/simplest_viewport
#
# (it can start with "./" to indicate current dir -- doesn't change anything,
# but it's accepted, as "find" will return paths like
# "./examples/web/simplest_viewport").
do_project ()
{
  local PROJECT_SUBDIR="$1"
  shift 1

  cd "${CASTLE_ENGINE_PATH}/${PROJECT_SUBDIR}"
  castle-engine clean
  castle-engine compile --target=web --mode=release

  CGE_WWW_DIST="${CGE_WWW_DEMOS}/${PROJECT_SUBDIR}"
  rm -Rf "${CGE_WWW_DIST}"
  mkdir -p "${CGE_WWW_DIST}"
  cp -R castle-engine-output/web/dist/* "${CGE_WWW_DIST}"
}

# Find and build *all* projects in CGE, with only some exceptions.
# Unused for now: This is cool, but for now it's OK to list ~20 projects.
# do_all_projects ()
# {
#   cd "${CASTLE_ENGINE_PATH}"
#
# 	"${FIND}" . \
# 	  '(' -path ./tools -prune ')' -o \
# 	  '(' -path ./examples/network/tcp_connection -prune ')' -o \
# 	  '(' -path ./tests/delphi_tests -prune ')' -o \
# 	  '(' -path ./examples/delphi -prune ')' -o \
#     '(' -path ./src/deprecated_library -prune ')' -o \
# 	  '(' -path ./examples/deprecated_library -prune ')' -o \
# 	  '(' -type d -iname castle-engine-output -prune ')' -o \
# 	  '(' -type f -iname CastleEngineManifest.xml -print ')' > \
# 	  /tmp/cge-projects.txt
# 	echo 'Found projects: '`wc -l < /tmp/cge-projects.txt`
#
# 	for MANIFEST in `cat /tmp/cge-projects.txt`; do
#     local PROJECT_SUBDIR=`dirname ${MANIFEST}`
# 	  echo 'Compiling project '${PROJECT_SUBDIR}
#     do_project ${PROJECT_SUBDIR}
# 	done
# }

# main code ---------------------------------------------------------------

#do_all_projects

# Examples tested on the web now:

# initial (simplest) web demos
do_project examples/web/simplest
do_project examples/web/simplest_viewport
do_project examples/web/simplest_invaders

# 2d
do_project examples/2d_games/platformer
do_project examples/component_gallery
do_project examples/animations/play_animation
do_project examples/2d_games/space_shooter
do_project examples/tiled/map_viewer # TODO: web: no open dialog (works, but could be more impressive)
do_project examples/tiled/strategy_game_demo

# 3d
do_project examples/ifc # TODO: web: no open dialog (works, but could be more impressive)
do_project examples/user_interface/zombie_fighter
do_project examples/viewport_and_scenes/cars_demo
do_project examples/viewport_and_scenes/collisions
do_project examples/3d_games/eye_of_beholder # TODO: web: fog
do_project examples/creature_behaviors # TODO: web: bump mapping, mouse look
do_project examples/third_person_navigation # TODO: web: mouse look
do_project examples/physics/physics_3d_shooter # TODO: web: mouse look
do_project examples/3d_games/dungeons_and_skeletons_fight # TODO: web: mouse look
do_project examples/3d_games/walking_adventure # TODO: web: mouse look

do_project tools/castle-editor-portable
do_project tests

# 3d, problems critical
# do_project examples/3d_games/explore_impressive_castle # TODO: web: bump mapping, mouse look, weird blinking
# do_project examples/terrain # TODO: web: terrain shader doesn't compile, water shader doesn't compile
# do_project examples/research_special_rendering_methods/test_rendering_opengl_capabilities/ # TODO: web: EFramebufferInvalid: Framebuffer check failed: INCOMPLETE_ATTACHMENT: Not all framebuffer attachment points are "framebuffer attachment complete" (FBO error number 36054)

do_project examples/screen_effects_demo # TODO: edge-detect effect fails

# audio
do_project examples/audio/game_3d_sound # TODO: silent without WebAudio, also change F5 shortcut (reload), also change right button (for mouse look)
do_project examples/audio/play_sounds # TODO: silent without WebAudio, also "Exit" should be hidden

# other repos (outside CGE), git clone them as siblings
do_project_any "${CASTLE_ENGINE_PATH}/../castle-model-viewer-mobile" 'castle-model-viewer-mobile' # TODO: web: no open dialog
do_project_any "${CASTLE_ENGINE_PATH}/../castle-dice-throwing" 'castle-dice-throwing'
