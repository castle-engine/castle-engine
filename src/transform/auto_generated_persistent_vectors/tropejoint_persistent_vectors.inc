{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FAnchorPersistent: TCastleVector3Persistent;
  function GetAnchorForPersistent: TVector3;
  procedure SetAnchorForPersistent(const AValue: TVector3);
published
  { @link(Anchor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(Anchor) directly.

    @seealso Anchor }
  property AnchorPersistent: TCastleVector3Persistent read FAnchorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TRopeJoint.GetAnchorForPersistent: TVector3;
begin
  Result := Anchor;
end;

procedure TRopeJoint.SetAnchorForPersistent(const AValue: TVector3);
begin
  Anchor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FAnchorPersistent := TCastleVector3Persistent.Create;
  FAnchorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetAnchorForPersistent;
  FAnchorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetAnchorForPersistent;
  FAnchorPersistent.InternalDefaultValue := Anchor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FAnchorPersistent);
{$endif read_implementation_destructor}

{ -*- buffer-read-only: t -*-

  Copyright 2018-2022 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated wrapper to make vectors/colors persistent.

  Do not edit this file manually!
  Instead
  - edit tools/internal/generate-persistent-vectors/persistent_vectors_input.txt
  - and run generate-persistent-vectors in that directory.
}

{$ifdef read_interface_class}
strict private
  FConnectedAnchorPersistent: TCastleVector3Persistent;
  function GetConnectedAnchorForPersistent: TVector3;
  procedure SetConnectedAnchorForPersistent(const AValue: TVector3);
published
  { @link(ConnectedAnchor) that can be visually edited in
    Castle Game Engine Editor, Lazarus and Delphi.
    Normal user code does not need to deal with this,
    instead read or write @link(ConnectedAnchor) directly.

    @seealso ConnectedAnchor }
  property ConnectedAnchorPersistent: TCastleVector3Persistent read FConnectedAnchorPersistent ;
{$endif read_interface_class}

{$ifdef read_implementation_methods}
function TRopeJoint.GetConnectedAnchorForPersistent: TVector3;
begin
  Result := ConnectedAnchor;
end;

procedure TRopeJoint.SetConnectedAnchorForPersistent(const AValue: TVector3);
begin
  ConnectedAnchor := AValue;
end;
{$endif read_implementation_methods}

{$ifdef read_implementation_constructor}
  FConnectedAnchorPersistent := TCastleVector3Persistent.Create;
  FConnectedAnchorPersistent.InternalGetValue := {$ifdef FPC}@{$endif}GetConnectedAnchorForPersistent;
  FConnectedAnchorPersistent.InternalSetValue := {$ifdef FPC}@{$endif}SetConnectedAnchorForPersistent;
  FConnectedAnchorPersistent.InternalDefaultValue := ConnectedAnchor; // current value is default
{$endif read_implementation_constructor}

{$ifdef read_implementation_destructor}
  FreeAndNil(FConnectedAnchorPersistent);
{$endif read_implementation_destructor}

