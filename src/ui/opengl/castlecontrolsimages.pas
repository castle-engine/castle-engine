{ -*- buffer-read-only: t -*- }

{ Unit automatically generated by image2pascal tool,
  to embed images in Pascal source code.
  @exclude (Exclude this unit from PasDoc documentation.) }
unit CastleControlsImages;

interface

uses CastleImages;

var
  Panel: TRGBAlphaImage;

var
  WindowDarkTransparent: TRGBAlphaImage;

var
  Slider: TRGBAlphaImage;

var
  Tooltip: TRGBImage;

var
  TooltipRounded: TRGBAlphaImage;

var
  ButtonDisabled: TRGBAlphaImage;

var
  ButtonPressed: TRGBAlphaImage;

var
  ButtonFocused: TRGBAlphaImage;

var
  ButtonNormal: TRGBAlphaImage;

var
  FrameWhite: TRGBAlphaImage;

var
  FrameWhiteBlack: TGrayscaleAlphaImage;

var
  FrameYellow: TRGBAlphaImage;

var
  FrameYellowBlack: TRGBAlphaImage;

var
  FrameThickWhite: TGrayscaleAlphaImage;

var
  FrameThickYellow: TRGBAlphaImage;

var
  ProgressBar: TRGBAlphaImage;

var
  ProgressFill: TRGBAlphaImage;

var
  TouchCtlInner: TGrayscaleAlphaImage;

var
  TouchCtlOuter: TGrayscaleAlphaImage;

var
  TouchCtlFlyInner: TRGBAlphaImage;

var
  TouchCtlFlyOuter: TGrayscaleAlphaImage;

var
  Crosshair1: TGrayscaleAlphaImage;

var
  Crosshair2: TGrayscaleAlphaImage;

var
  PanelSeparator: TGrayscaleImage;

var
  WindowDark: TRGBImage;

var
  WindowGray: TRGBImage;

var
  ScrollbarFrame: TRGBImage;

var
  ScrollbarSlider: TRGBImage;

var
  SliderPosition: TRGBImage;

var
  ErrorBackground: TGrayscaleImage;

implementation

uses SysUtils;

{ Actual image data is included from another file, with a deliberately
  non-Pascal file extension ".image_data". This way online code analysis
  tools will NOT consider this source code as an uncommented Pascal code
  (which would be unfair --- the image data file is autogenerated
  and never supposed to be processed by a human). }
{$I castlecontrolsimages.image_data}

initialization
  Panel := TRGBAlphaImage.Create(PanelWidth, PanelHeight, PanelDepth);
  Move(PanelPixels, Panel.RawPixels^, SizeOf(PanelPixels));
  Panel.URL := 'embedded-image:/Panel';
  WindowDarkTransparent := TRGBAlphaImage.Create(WindowDarkTransparentWidth, WindowDarkTransparentHeight, WindowDarkTransparentDepth);
  Move(WindowDarkTransparentPixels, WindowDarkTransparent.RawPixels^, SizeOf(WindowDarkTransparentPixels));
  WindowDarkTransparent.URL := 'embedded-image:/WindowDarkTransparent';
  Slider := TRGBAlphaImage.Create(SliderWidth, SliderHeight, SliderDepth);
  Move(SliderPixels, Slider.RawPixels^, SizeOf(SliderPixels));
  Slider.URL := 'embedded-image:/Slider';
  Tooltip := TRGBImage.Create(TooltipWidth, TooltipHeight, TooltipDepth);
  Move(TooltipPixels, Tooltip.RawPixels^, SizeOf(TooltipPixels));
  Tooltip.URL := 'embedded-image:/Tooltip';
  TooltipRounded := TRGBAlphaImage.Create(TooltipRoundedWidth, TooltipRoundedHeight, TooltipRoundedDepth);
  Move(TooltipRoundedPixels, TooltipRounded.RawPixels^, SizeOf(TooltipRoundedPixels));
  TooltipRounded.URL := 'embedded-image:/TooltipRounded';
  ButtonDisabled := TRGBAlphaImage.Create(ButtonDisabledWidth, ButtonDisabledHeight, ButtonDisabledDepth);
  Move(ButtonDisabledPixels, ButtonDisabled.RawPixels^, SizeOf(ButtonDisabledPixels));
  ButtonDisabled.URL := 'embedded-image:/ButtonDisabled';
  ButtonPressed := TRGBAlphaImage.Create(ButtonPressedWidth, ButtonPressedHeight, ButtonPressedDepth);
  Move(ButtonPressedPixels, ButtonPressed.RawPixels^, SizeOf(ButtonPressedPixels));
  ButtonPressed.URL := 'embedded-image:/ButtonPressed';
  ButtonFocused := TRGBAlphaImage.Create(ButtonFocusedWidth, ButtonFocusedHeight, ButtonFocusedDepth);
  Move(ButtonFocusedPixels, ButtonFocused.RawPixels^, SizeOf(ButtonFocusedPixels));
  ButtonFocused.URL := 'embedded-image:/ButtonFocused';
  ButtonNormal := TRGBAlphaImage.Create(ButtonNormalWidth, ButtonNormalHeight, ButtonNormalDepth);
  Move(ButtonNormalPixels, ButtonNormal.RawPixels^, SizeOf(ButtonNormalPixels));
  ButtonNormal.URL := 'embedded-image:/ButtonNormal';
  FrameWhite := TRGBAlphaImage.Create(FrameWhiteWidth, FrameWhiteHeight, FrameWhiteDepth);
  Move(FrameWhitePixels, FrameWhite.RawPixels^, SizeOf(FrameWhitePixels));
  FrameWhite.URL := 'embedded-image:/FrameWhite';
  FrameWhiteBlack := TGrayscaleAlphaImage.Create(FrameWhiteBlackWidth, FrameWhiteBlackHeight, FrameWhiteBlackDepth);
  Move(FrameWhiteBlackPixels, FrameWhiteBlack.RawPixels^, SizeOf(FrameWhiteBlackPixels));
  FrameWhiteBlack.URL := 'embedded-image:/FrameWhiteBlack';
  FrameYellow := TRGBAlphaImage.Create(FrameYellowWidth, FrameYellowHeight, FrameYellowDepth);
  Move(FrameYellowPixels, FrameYellow.RawPixels^, SizeOf(FrameYellowPixels));
  FrameYellow.URL := 'embedded-image:/FrameYellow';
  FrameYellowBlack := TRGBAlphaImage.Create(FrameYellowBlackWidth, FrameYellowBlackHeight, FrameYellowBlackDepth);
  Move(FrameYellowBlackPixels, FrameYellowBlack.RawPixels^, SizeOf(FrameYellowBlackPixels));
  FrameYellowBlack.URL := 'embedded-image:/FrameYellowBlack';
  FrameThickWhite := TGrayscaleAlphaImage.Create(FrameThickWhiteWidth, FrameThickWhiteHeight, FrameThickWhiteDepth);
  Move(FrameThickWhitePixels, FrameThickWhite.RawPixels^, SizeOf(FrameThickWhitePixels));
  FrameThickWhite.URL := 'embedded-image:/FrameThickWhite';
  FrameThickYellow := TRGBAlphaImage.Create(FrameThickYellowWidth, FrameThickYellowHeight, FrameThickYellowDepth);
  Move(FrameThickYellowPixels, FrameThickYellow.RawPixels^, SizeOf(FrameThickYellowPixels));
  FrameThickYellow.URL := 'embedded-image:/FrameThickYellow';
  ProgressBar := TRGBAlphaImage.Create(ProgressBarWidth, ProgressBarHeight, ProgressBarDepth);
  Move(ProgressBarPixels, ProgressBar.RawPixels^, SizeOf(ProgressBarPixels));
  ProgressBar.URL := 'embedded-image:/ProgressBar';
  ProgressFill := TRGBAlphaImage.Create(ProgressFillWidth, ProgressFillHeight, ProgressFillDepth);
  Move(ProgressFillPixels, ProgressFill.RawPixels^, SizeOf(ProgressFillPixels));
  ProgressFill.URL := 'embedded-image:/ProgressFill';
  TouchCtlInner := TGrayscaleAlphaImage.Create(TouchCtlInnerWidth, TouchCtlInnerHeight, TouchCtlInnerDepth);
  Move(TouchCtlInnerPixels, TouchCtlInner.RawPixels^, SizeOf(TouchCtlInnerPixels));
  TouchCtlInner.URL := 'embedded-image:/TouchCtlInner';
  TouchCtlOuter := TGrayscaleAlphaImage.Create(TouchCtlOuterWidth, TouchCtlOuterHeight, TouchCtlOuterDepth);
  Move(TouchCtlOuterPixels, TouchCtlOuter.RawPixels^, SizeOf(TouchCtlOuterPixels));
  TouchCtlOuter.URL := 'embedded-image:/TouchCtlOuter';
  TouchCtlFlyInner := TRGBAlphaImage.Create(TouchCtlFlyInnerWidth, TouchCtlFlyInnerHeight, TouchCtlFlyInnerDepth);
  Move(TouchCtlFlyInnerPixels, TouchCtlFlyInner.RawPixels^, SizeOf(TouchCtlFlyInnerPixels));
  TouchCtlFlyInner.URL := 'embedded-image:/TouchCtlFlyInner';
  TouchCtlFlyOuter := TGrayscaleAlphaImage.Create(TouchCtlFlyOuterWidth, TouchCtlFlyOuterHeight, TouchCtlFlyOuterDepth);
  Move(TouchCtlFlyOuterPixels, TouchCtlFlyOuter.RawPixels^, SizeOf(TouchCtlFlyOuterPixels));
  TouchCtlFlyOuter.URL := 'embedded-image:/TouchCtlFlyOuter';
  Crosshair1 := TGrayscaleAlphaImage.Create(Crosshair1Width, Crosshair1Height, Crosshair1Depth);
  Move(Crosshair1Pixels, Crosshair1.RawPixels^, SizeOf(Crosshair1Pixels));
  Crosshair1.URL := 'embedded-image:/Crosshair1';
  Crosshair2 := TGrayscaleAlphaImage.Create(Crosshair2Width, Crosshair2Height, Crosshair2Depth);
  Move(Crosshair2Pixels, Crosshair2.RawPixels^, SizeOf(Crosshair2Pixels));
  Crosshair2.URL := 'embedded-image:/Crosshair2';
  PanelSeparator := TGrayscaleImage.Create(PanelSeparatorWidth, PanelSeparatorHeight, PanelSeparatorDepth);
  Move(PanelSeparatorPixels, PanelSeparator.RawPixels^, SizeOf(PanelSeparatorPixels));
  PanelSeparator.URL := 'embedded-image:/PanelSeparator';
  WindowDark := TRGBImage.Create(WindowDarkWidth, WindowDarkHeight, WindowDarkDepth);
  Move(WindowDarkPixels, WindowDark.RawPixels^, SizeOf(WindowDarkPixels));
  WindowDark.URL := 'embedded-image:/WindowDark';
  WindowGray := TRGBImage.Create(WindowGrayWidth, WindowGrayHeight, WindowGrayDepth);
  Move(WindowGrayPixels, WindowGray.RawPixels^, SizeOf(WindowGrayPixels));
  WindowGray.URL := 'embedded-image:/WindowGray';
  ScrollbarFrame := TRGBImage.Create(ScrollbarFrameWidth, ScrollbarFrameHeight, ScrollbarFrameDepth);
  Move(ScrollbarFramePixels, ScrollbarFrame.RawPixels^, SizeOf(ScrollbarFramePixels));
  ScrollbarFrame.URL := 'embedded-image:/ScrollbarFrame';
  ScrollbarSlider := TRGBImage.Create(ScrollbarSliderWidth, ScrollbarSliderHeight, ScrollbarSliderDepth);
  Move(ScrollbarSliderPixels, ScrollbarSlider.RawPixels^, SizeOf(ScrollbarSliderPixels));
  ScrollbarSlider.URL := 'embedded-image:/ScrollbarSlider';
  SliderPosition := TRGBImage.Create(SliderPositionWidth, SliderPositionHeight, SliderPositionDepth);
  Move(SliderPositionPixels, SliderPosition.RawPixels^, SizeOf(SliderPositionPixels));
  SliderPosition.URL := 'embedded-image:/SliderPosition';
  ErrorBackground := TGrayscaleImage.Create(ErrorBackgroundWidth, ErrorBackgroundHeight, ErrorBackgroundDepth);
  Move(ErrorBackgroundPixels, ErrorBackground.RawPixels^, SizeOf(ErrorBackgroundPixels));
  ErrorBackground.URL := 'embedded-image:/ErrorBackground';
finalization
  FreeAndNil(Panel);
  FreeAndNil(WindowDarkTransparent);
  FreeAndNil(Slider);
  FreeAndNil(Tooltip);
  FreeAndNil(TooltipRounded);
  FreeAndNil(ButtonDisabled);
  FreeAndNil(ButtonPressed);
  FreeAndNil(ButtonFocused);
  FreeAndNil(ButtonNormal);
  FreeAndNil(FrameWhite);
  FreeAndNil(FrameWhiteBlack);
  FreeAndNil(FrameYellow);
  FreeAndNil(FrameYellowBlack);
  FreeAndNil(FrameThickWhite);
  FreeAndNil(FrameThickYellow);
  FreeAndNil(ProgressBar);
  FreeAndNil(ProgressFill);
  FreeAndNil(TouchCtlInner);
  FreeAndNil(TouchCtlOuter);
  FreeAndNil(TouchCtlFlyInner);
  FreeAndNil(TouchCtlFlyOuter);
  FreeAndNil(Crosshair1);
  FreeAndNil(Crosshair2);
  FreeAndNil(PanelSeparator);
  FreeAndNil(WindowDark);
  FreeAndNil(WindowGray);
  FreeAndNil(ScrollbarFrame);
  FreeAndNil(ScrollbarSlider);
  FreeAndNil(SliderPosition);
  FreeAndNil(ErrorBackground);
end.