{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetConeInnerAngle: Single;
    procedure SetConeInnerAngle(const Value: Single);
    function GetConeOuterAngle: Single;
    procedure SetConeOuterAngle(const Value: Single);
    function GetConeOuterGain: Single;
    procedure SetConeOuterGain(const Value: Single);
    function GetDirection: TVector3;
    procedure SetDirection(const Value: TVector3);
    function GetDistanceModel: TDistanceModel;
    procedure SetDistanceModel(const Value: TDistanceModel);
    function GetDopplerEnabled: Boolean;
    procedure SetDopplerEnabled(const Value: Boolean);
    function GetEnableHRTF: Boolean;
    procedure SetEnableHRTF(const Value: Boolean);
    function GetGain: Single;
    procedure SetGain(const Value: Single);
    function GetIntensity: Single;
    procedure SetIntensity(const Value: Single);
    function GetLocation: TVector3;
    procedure SetLocation(const Value: TVector3);
    function GetMaxDistance: Single;
    procedure SetMaxDistance(const Value: Single);
    function GetPriority: Single;
    procedure SetPriority(const Value: Single);
    function GetReferenceDistance: Single;
    procedure SetReferenceDistance(const Value: Single);
    function GetRolloffFactor: Single;
    procedure SetRolloffFactor(const Value: Single);
    function GetSpatialize: Boolean;
    procedure SetSpatialize(const Value: Boolean);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdChildren: TMFNode;
    { Internal wrapper for property @code(Children). This wrapper API may change, we advise to access simpler @code(Children) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChildren: TMFNode read FFdChildren;
    {  }
    procedure SetChildren(const Value: array of TX3DNode);

    strict private FFdConeInnerAngle: TSFFloat;
    { Internal wrapper for property @code(ConeInnerAngle). This wrapper API may change, we advise to access simpler @code(ConeInnerAngle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdConeInnerAngle: TSFFloat read FFdConeInnerAngle;
    {  }
    property ConeInnerAngle: Single read GetConeInnerAngle write SetConeInnerAngle;

    strict private FFdConeOuterAngle: TSFFloat;
    { Internal wrapper for property @code(ConeOuterAngle). This wrapper API may change, we advise to access simpler @code(ConeOuterAngle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdConeOuterAngle: TSFFloat read FFdConeOuterAngle;
    {  }
    property ConeOuterAngle: Single read GetConeOuterAngle write SetConeOuterAngle;

    strict private FFdConeOuterGain: TSFFloat;
    { Internal wrapper for property @code(ConeOuterGain). This wrapper API may change, we advise to access simpler @code(ConeOuterGain) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdConeOuterGain: TSFFloat read FFdConeOuterGain;
    {  }
    property ConeOuterGain: Single read GetConeOuterGain write SetConeOuterGain;

    strict private FFdDirection: TSFVec3f;
    { Internal wrapper for property @code(Direction). This wrapper API may change, we advise to access simpler @code(Direction) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDirection: TSFVec3f read FFdDirection;
    {  }
    property Direction: TVector3 read GetDirection write SetDirection;

    strict private FFdDistanceModel: TSFStringEnum;
    { Internal wrapper for property @code(DistanceModel). This wrapper API may change, we advise to access simpler @code(DistanceModel) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDistanceModel: TSFStringEnum read FFdDistanceModel;
    {  }
    property DistanceModel: TDistanceModel read GetDistanceModel write SetDistanceModel;

    strict private FFdDopplerEnabled: TSFBool;
    { Internal wrapper for property @code(DopplerEnabled). This wrapper API may change, we advise to access simpler @code(DopplerEnabled) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDopplerEnabled: TSFBool read FFdDopplerEnabled;
    {  }
    property DopplerEnabled: Boolean read GetDopplerEnabled write SetDopplerEnabled;

    strict private FFdEnableHRTF: TSFBool;
    { Internal wrapper for property @code(EnableHRTF). This wrapper API may change, we advise to access simpler @code(EnableHRTF) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdEnableHRTF: TSFBool read FFdEnableHRTF;
    {  }
    property EnableHRTF: Boolean read GetEnableHRTF write SetEnableHRTF;

    strict private FFdGain: TSFFloat;
    { Internal wrapper for property @code(Gain). This wrapper API may change, we advise to access simpler @code(Gain) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdGain: TSFFloat read FFdGain;
    {  }
    property Gain: Single read GetGain write SetGain;

    strict private FFdIntensity: TSFFloat;
    { Internal wrapper for property @code(Intensity). This wrapper API may change, we advise to access simpler @code(Intensity) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdIntensity: TSFFloat read FFdIntensity;
    {  }
    property Intensity: Single read GetIntensity write SetIntensity;

    strict private FFdLocation: TSFVec3f;
    { Internal wrapper for property @code(Location). This wrapper API may change, we advise to access simpler @code(Location) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLocation: TSFVec3f read FFdLocation;
    {  }
    property Location: TVector3 read GetLocation write SetLocation;

    strict private FFdMaxDistance: TSFFloat;
    { Internal wrapper for property @code(MaxDistance). This wrapper API may change, we advise to access simpler @code(MaxDistance) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMaxDistance: TSFFloat read FFdMaxDistance;
    {  }
    property MaxDistance: Single read GetMaxDistance write SetMaxDistance;

    strict private FFdPriority: TSFFloat;
    { Internal wrapper for property @code(Priority). This wrapper API may change, we advise to access simpler @code(Priority) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdPriority: TSFFloat read FFdPriority;
    {  }
    property Priority: Single read GetPriority write SetPriority;

    strict private FFdReferenceDistance: TSFFloat;
    { Internal wrapper for property @code(ReferenceDistance). This wrapper API may change, we advise to access simpler @code(ReferenceDistance) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdReferenceDistance: TSFFloat read FFdReferenceDistance;
    {  }
    property ReferenceDistance: Single read GetReferenceDistance write SetReferenceDistance;

    strict private FFdRolloffFactor: TSFFloat;
    { Internal wrapper for property @code(RolloffFactor). This wrapper API may change, we advise to access simpler @code(RolloffFactor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRolloffFactor: TSFFloat read FFdRolloffFactor;
    {  }
    property RolloffFactor: Single read GetRolloffFactor write SetRolloffFactor;

    strict private FFdSpatialize: TSFBool;
    { Internal wrapper for property @code(Spatialize). This wrapper API may change, we advise to access simpler @code(Spatialize) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSpatialize: TSFBool read FFdSpatialize;
    {  }
    property Spatialize: Boolean read GetSpatialize write SetSpatialize;

{$endif read_interface}

{$ifdef read_implementation}

{ TSpatialSoundNode ----------------------------------------------- }

procedure TSpatialSoundNode.SetChildren(const Value: array of TX3DNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TX3DNode));
  FdChildren.Send(A);
end;

function TSpatialSoundNode.GetConeInnerAngle: Single;
begin
  Result := FdConeInnerAngle.Value;
end;

procedure TSpatialSoundNode.SetConeInnerAngle(const Value: Single);
begin
  FdConeInnerAngle.Send(Value);
end;

function TSpatialSoundNode.GetConeOuterAngle: Single;
begin
  Result := FdConeOuterAngle.Value;
end;

procedure TSpatialSoundNode.SetConeOuterAngle(const Value: Single);
begin
  FdConeOuterAngle.Send(Value);
end;

function TSpatialSoundNode.GetConeOuterGain: Single;
begin
  Result := FdConeOuterGain.Value;
end;

procedure TSpatialSoundNode.SetConeOuterGain(const Value: Single);
begin
  FdConeOuterGain.Send(Value);
end;

function TSpatialSoundNode.GetDirection: TVector3;
begin
  Result := FdDirection.Value;
end;

procedure TSpatialSoundNode.SetDirection(const Value: TVector3);
begin
  FdDirection.Send(Value);
end;

function TSpatialSoundNode.GetDistanceModel: TDistanceModel;
begin
  Result := TDistanceModel(FdDistanceModel.EnumValue);
end;

procedure TSpatialSoundNode.SetDistanceModel(const Value: TDistanceModel);
begin
  FdDistanceModel.SendEnumValue(Ord(Value));
end;

function TSpatialSoundNode.GetDopplerEnabled: Boolean;
begin
  Result := FdDopplerEnabled.Value;
end;

procedure TSpatialSoundNode.SetDopplerEnabled(const Value: Boolean);
begin
  FdDopplerEnabled.Send(Value);
end;

function TSpatialSoundNode.GetEnableHRTF: Boolean;
begin
  Result := FdEnableHRTF.Value;
end;

procedure TSpatialSoundNode.SetEnableHRTF(const Value: Boolean);
begin
  FdEnableHRTF.Send(Value);
end;

function TSpatialSoundNode.GetGain: Single;
begin
  Result := FdGain.Value;
end;

procedure TSpatialSoundNode.SetGain(const Value: Single);
begin
  FdGain.Send(Value);
end;

function TSpatialSoundNode.GetIntensity: Single;
begin
  Result := FdIntensity.Value;
end;

procedure TSpatialSoundNode.SetIntensity(const Value: Single);
begin
  FdIntensity.Send(Value);
end;

function TSpatialSoundNode.GetLocation: TVector3;
begin
  Result := FdLocation.Value;
end;

procedure TSpatialSoundNode.SetLocation(const Value: TVector3);
begin
  FdLocation.Send(Value);
end;

function TSpatialSoundNode.GetMaxDistance: Single;
begin
  Result := FdMaxDistance.Value;
end;

procedure TSpatialSoundNode.SetMaxDistance(const Value: Single);
begin
  FdMaxDistance.Send(Value);
end;

function TSpatialSoundNode.GetPriority: Single;
begin
  Result := FdPriority.Value;
end;

procedure TSpatialSoundNode.SetPriority(const Value: Single);
begin
  FdPriority.Send(Value);
end;

function TSpatialSoundNode.GetReferenceDistance: Single;
begin
  Result := FdReferenceDistance.Value;
end;

procedure TSpatialSoundNode.SetReferenceDistance(const Value: Single);
begin
  FdReferenceDistance.Send(Value);
end;

function TSpatialSoundNode.GetRolloffFactor: Single;
begin
  Result := FdRolloffFactor.Value;
end;

procedure TSpatialSoundNode.SetRolloffFactor(const Value: Single);
begin
  FdRolloffFactor.Send(Value);
end;

function TSpatialSoundNode.GetSpatialize: Boolean;
begin
  Result := FdSpatialize.Value;
end;

procedure TSpatialSoundNode.SetSpatialize(const Value: Boolean);
begin
  FdSpatialize.Send(Value);
end;

class function TSpatialSoundNode.ClassX3DType: String;
begin
  Result := 'SpatialSound';
end;

procedure TSpatialSoundNode.CreateNode;
begin
  inherited;

  FFdChildren := TMFNode.Create(Self, True, 'children', [TAbstractSoundChannelNode, TAbstractSoundProcessingNode, TAbstractSoundSourceNode]);
   FdChildren.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChildren);

  FFdConeInnerAngle := TSFFloat.Create(Self, True, 'coneInnerAngle', 6.2832);
   FdConeInnerAngle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdConeInnerAngle);

  FFdConeOuterAngle := TSFFloat.Create(Self, True, 'coneOuterAngle', 6.2832);
   FdConeOuterAngle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdConeOuterAngle);

  FFdConeOuterGain := TSFFloat.Create(Self, True, 'coneOuterGain', 0);
   FdConeOuterGain.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdConeOuterGain);

  FFdDirection := TSFVec3f.Create(Self, True, 'direction', Vector3(0, 0, 1));
   FdDirection.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdDirection);

  FFdDistanceModel := TSFStringEnum.Create(Self, True, 'distanceModel', @DistanceModelNames, Ord(High(DistanceModelNames)) + 1, Ord(dmInverse));
   FdDistanceModel.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdDistanceModel);

  FFdDopplerEnabled := TSFBool.Create(Self, True, 'dopplerEnabled', false);
   FdDopplerEnabled.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdDopplerEnabled);

  FFdEnableHRTF := TSFBool.Create(Self, True, 'enableHRTF', false);
   FdEnableHRTF.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdEnableHRTF);

  FFdGain := TSFFloat.Create(Self, True, 'gain', 1);
   FdGain.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGain);

  FFdIntensity := TSFFloat.Create(Self, True, 'intensity', 1);
   FdIntensity.ChangeAlways := chVisibleNonGeometry;
   FdIntensity.MustBeNonnegative := true;
  AddField(FFdIntensity);

  FFdLocation := TSFVec3f.Create(Self, True, 'location', Vector3(0, 0, 0));
   FdLocation.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLocation);

  FFdMaxDistance := TSFFloat.Create(Self, True, 'maxDistance', 10000);
   FdMaxDistance.ChangeAlways := chVisibleNonGeometry;
   FdMaxDistance.MustBeNonnegative := true;
  AddField(FFdMaxDistance);

  FFdPriority := TSFFloat.Create(Self, True, 'priority', 0);
   FdPriority.ChangeAlways := chVisibleNonGeometry;
   FdPriority.MustBeNonnegative := true;
  AddField(FFdPriority);

  FFdReferenceDistance := TSFFloat.Create(Self, True, 'referenceDistance', 1);
   FdReferenceDistance.ChangeAlways := chVisibleNonGeometry;
   FdReferenceDistance.MustBeNonnegative := true;
  AddField(FFdReferenceDistance);

  FFdRolloffFactor := TSFFloat.Create(Self, True, 'rolloffFactor', 1);
   FdRolloffFactor.ChangeAlways := chVisibleNonGeometry;
   FdRolloffFactor.MustBeNonnegative := true;
  AddField(FFdRolloffFactor);

  FFdSpatialize := TSFBool.Create(Self, False, 'spatialize', true);
   FdSpatialize.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSpatialize);
end;

{$endif read_implementation}
