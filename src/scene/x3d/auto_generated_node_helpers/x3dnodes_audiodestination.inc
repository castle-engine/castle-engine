{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetMaxChannelCount: Integer;
    procedure SetMaxChannelCount(const Value: Integer);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdMaxChannelCount: TSFInt32;
    { Internal wrapper for property @code(MaxChannelCount). This wrapper API may change, we advise to access simpler @code(MaxChannelCount) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMaxChannelCount: TSFInt32 read FFdMaxChannelCount;
    {  }
    property MaxChannelCount: Integer read GetMaxChannelCount write SetMaxChannelCount;

{$endif read_interface}

{$ifdef read_implementation}

{ TAudioDestinationNode ----------------------------------------------- }

function TAudioDestinationNode.GetMaxChannelCount: Integer;
begin
  Result := FdMaxChannelCount.Value;
end;

procedure TAudioDestinationNode.SetMaxChannelCount(const Value: Integer);
begin
  FdMaxChannelCount.Send(Value);
end;

class function TAudioDestinationNode.ClassX3DType: String;
begin
  Result := 'AudioDestination';
end;

procedure TAudioDestinationNode.CreateNode;
begin
  inherited;

  FFdMaxChannelCount := TSFInt32.Create(Self, True, 'maxChannelCount', 2);
   FdMaxChannelCount.ChangeAlways := chVisibleNonGeometry;
   FdMaxChannelCount.MustBeNonnegative := true;
  AddField(FFdMaxChannelCount);
end;

{$endif read_implementation}
