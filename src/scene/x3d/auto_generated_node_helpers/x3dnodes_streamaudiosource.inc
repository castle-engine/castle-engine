{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetChannelCountMode: TChannelCountMode;
    procedure SetChannelCountMode(const Value: TChannelCountMode);
    function GetChannelInterpretation: TChannelInterpretation;
    procedure SetChannelInterpretation(const Value: TChannelInterpretation);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdChannelCountMode: TSFStringEnum;
    { Internal wrapper for property @code(ChannelCountMode). This wrapper API may change, we advise to access simpler @code(ChannelCountMode) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelCountMode: TSFStringEnum read FFdChannelCountMode;
    {  }
    property ChannelCountMode: TChannelCountMode read GetChannelCountMode write SetChannelCountMode;

    strict private FFdChannelInterpretation: TSFStringEnum;
    { Internal wrapper for property @code(ChannelInterpretation). This wrapper API may change, we advise to access simpler @code(ChannelInterpretation) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelInterpretation: TSFStringEnum read FFdChannelInterpretation;
    {  }
    property ChannelInterpretation: TChannelInterpretation read GetChannelInterpretation write SetChannelInterpretation;

    strict private FFdStreamIdentifier: TMFString;
    { Internal wrapper for property @code(StreamIdentifier). This wrapper API may change, we advise to access simpler @code(StreamIdentifier) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdStreamIdentifier: TMFString read FFdStreamIdentifier;
    {  }
    procedure SetStreamIdentifier(const Value: array of string); overload;
    {  }
    procedure SetStreamIdentifier(const Value: TCastleStringList); overload;

    strict private FEventChannelCount: TSFInt32Event;
    {  }
    public property EventChannelCount: TSFInt32Event read FEventChannelCount;

{$endif read_interface}

{$ifdef read_implementation}

{ TStreamAudioSourceNode ----------------------------------------------- }

function TStreamAudioSourceNode.GetChannelCountMode: TChannelCountMode;
begin
  Result := TChannelCountMode(FdChannelCountMode.EnumValue);
end;

procedure TStreamAudioSourceNode.SetChannelCountMode(const Value: TChannelCountMode);
begin
  FdChannelCountMode.SendEnumValue(Ord(Value));
end;

function TStreamAudioSourceNode.GetChannelInterpretation: TChannelInterpretation;
begin
  Result := TChannelInterpretation(FdChannelInterpretation.EnumValue);
end;

procedure TStreamAudioSourceNode.SetChannelInterpretation(const Value: TChannelInterpretation);
begin
  FdChannelInterpretation.SendEnumValue(Ord(Value));
end;

procedure TStreamAudioSourceNode.SetStreamIdentifier(const Value: array of string);
begin
  FdStreamIdentifier.Send(Value);
end;

procedure TStreamAudioSourceNode.SetStreamIdentifier(const Value: TCastleStringList);
begin
  FdStreamIdentifier.Send(Value);
end;

class function TStreamAudioSourceNode.ClassX3DType: String;
begin
  Result := 'StreamAudioSource';
end;

procedure TStreamAudioSourceNode.CreateNode;
begin
  inherited;

  FFdChannelCountMode := TSFStringEnum.Create(Self, True, 'channelCountMode', @ChannelCountModeNames, Ord(High(ChannelCountModeNames)) + 1, Ord(ccmMax));
   FdChannelCountMode.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelCountMode);

  FFdChannelInterpretation := TSFStringEnum.Create(Self, True, 'channelInterpretation', @ChannelInterpretationNames, Ord(High(ChannelInterpretationNames)) + 1, Ord(ciSpeakers));
   FdChannelInterpretation.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelInterpretation);

  FFdStreamIdentifier := TMFString.Create(Self, True, 'streamIdentifier', []);
   FdStreamIdentifier.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdStreamIdentifier);

  FEventChannelCount := TSFInt32Event.Create(Self, 'channelCount', false);
  AddEvent(FEventChannelCount);
end;

{$endif read_implementation}
