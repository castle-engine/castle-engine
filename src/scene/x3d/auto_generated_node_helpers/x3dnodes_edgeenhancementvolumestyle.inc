{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetEdgeColor: TCastleColor;
    procedure SetEdgeColor(const Value: TCastleColor);
    function GetGradientThreshold: Single;
    procedure SetGradientThreshold(const Value: Single);
    function GetSurfaceNormals: TAbstractTexture3DNode;
    procedure SetSurfaceNormals(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdEdgeColor: TSFColorRGBA;
    { Internal wrapper for property @code(EdgeColor). This wrapper API may change, we advise to access simpler @code(EdgeColor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdEdgeColor: TSFColorRGBA read FFdEdgeColor;
    {  }
    property EdgeColor: TCastleColor read GetEdgeColor write SetEdgeColor;

    strict private FFdGradientThreshold: TSFFloat;
    { Internal wrapper for property @code(GradientThreshold). This wrapper API may change, we advise to access simpler @code(GradientThreshold) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdGradientThreshold: TSFFloat read FFdGradientThreshold;
    {  }
    property GradientThreshold: Single read GetGradientThreshold write SetGradientThreshold;

    strict private FFdSurfaceNormals: TSFNode;
    { Internal wrapper for property @code(SurfaceNormals). This wrapper API may change, we advise to access simpler @code(SurfaceNormals) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceNormals: TSFNode read FFdSurfaceNormals;
    {  }
    property SurfaceNormals: TAbstractTexture3DNode read GetSurfaceNormals write SetSurfaceNormals;

{$endif read_interface}

{$ifdef read_implementation}

{ TEdgeEnhancementVolumeStyleNode ----------------------------------------------- }

function TEdgeEnhancementVolumeStyleNode.GetEdgeColor: TCastleColor;
begin
  Result := FdEdgeColor.Value;
end;

procedure TEdgeEnhancementVolumeStyleNode.SetEdgeColor(const Value: TCastleColor);
begin
  FdEdgeColor.Send(Value);
end;

function TEdgeEnhancementVolumeStyleNode.GetGradientThreshold: Single;
begin
  Result := FdGradientThreshold.Value;
end;

procedure TEdgeEnhancementVolumeStyleNode.SetGradientThreshold(const Value: Single);
begin
  FdGradientThreshold.Send(Value);
end;

function TEdgeEnhancementVolumeStyleNode.GetSurfaceNormals: TAbstractTexture3DNode;
begin
  if FdSurfaceNormals.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSurfaceNormals.Value)
  else
    Result := nil;
end;

procedure TEdgeEnhancementVolumeStyleNode.SetSurfaceNormals(const Value: TAbstractTexture3DNode);
begin
  FdSurfaceNormals.Send(Value);
end;

class function TEdgeEnhancementVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'EdgeEnhancementVolumeStyle';
end;

procedure TEdgeEnhancementVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdEdgeColor := TSFColorRGBA.Create(Self, True, 'edgeColor', Vector4(0, 0, 0, 1));
   FdEdgeColor.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdEdgeColor);

  FFdGradientThreshold := TSFFloat.Create(Self, True, 'gradientThreshold', 0.4);
   FdGradientThreshold.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGradientThreshold);

  FFdSurfaceNormals := TSFNode.Create(Self, True, 'surfaceNormals', [TAbstractTexture3DNode]);
   FdSurfaceNormals.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceNormals);
end;

{$endif read_implementation}
