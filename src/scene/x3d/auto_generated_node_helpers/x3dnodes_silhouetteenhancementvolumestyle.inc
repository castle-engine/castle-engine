{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetSilhouetteBoundaryOpacity: Single;
    procedure SetSilhouetteBoundaryOpacity(const Value: Single);
    function GetSilhouetteRetainedOpacity: Single;
    procedure SetSilhouetteRetainedOpacity(const Value: Single);
    function GetSilhouetteSharpness: Single;
    procedure SetSilhouetteSharpness(const Value: Single);
    function GetSurfaceNormals: TAbstractTexture3DNode;
    procedure SetSurfaceNormals(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdSilhouetteBoundaryOpacity: TSFFloat;
    { Internal wrapper for property @code(SilhouetteBoundaryOpacity). This wrapper API may change, we advise to access simpler @code(SilhouetteBoundaryOpacity) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSilhouetteBoundaryOpacity: TSFFloat read FFdSilhouetteBoundaryOpacity;
    {  }
    property SilhouetteBoundaryOpacity: Single read GetSilhouetteBoundaryOpacity write SetSilhouetteBoundaryOpacity;

    strict private FFdSilhouetteRetainedOpacity: TSFFloat;
    { Internal wrapper for property @code(SilhouetteRetainedOpacity). This wrapper API may change, we advise to access simpler @code(SilhouetteRetainedOpacity) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSilhouetteRetainedOpacity: TSFFloat read FFdSilhouetteRetainedOpacity;
    {  }
    property SilhouetteRetainedOpacity: Single read GetSilhouetteRetainedOpacity write SetSilhouetteRetainedOpacity;

    strict private FFdSilhouetteSharpness: TSFFloat;
    { Internal wrapper for property @code(SilhouetteSharpness). This wrapper API may change, we advise to access simpler @code(SilhouetteSharpness) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSilhouetteSharpness: TSFFloat read FFdSilhouetteSharpness;
    {  }
    property SilhouetteSharpness: Single read GetSilhouetteSharpness write SetSilhouetteSharpness;

    strict private FFdSurfaceNormals: TSFNode;
    { Internal wrapper for property @code(SurfaceNormals). This wrapper API may change, we advise to access simpler @code(SurfaceNormals) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceNormals: TSFNode read FFdSurfaceNormals;
    {  }
    property SurfaceNormals: TAbstractTexture3DNode read GetSurfaceNormals write SetSurfaceNormals;

{$endif read_interface}

{$ifdef read_implementation}

{ TSilhouetteEnhancementVolumeStyleNode ----------------------------------------------- }

function TSilhouetteEnhancementVolumeStyleNode.GetSilhouetteBoundaryOpacity: Single;
begin
  Result := FdSilhouetteBoundaryOpacity.Value;
end;

procedure TSilhouetteEnhancementVolumeStyleNode.SetSilhouetteBoundaryOpacity(const Value: Single);
begin
  FdSilhouetteBoundaryOpacity.Send(Value);
end;

function TSilhouetteEnhancementVolumeStyleNode.GetSilhouetteRetainedOpacity: Single;
begin
  Result := FdSilhouetteRetainedOpacity.Value;
end;

procedure TSilhouetteEnhancementVolumeStyleNode.SetSilhouetteRetainedOpacity(const Value: Single);
begin
  FdSilhouetteRetainedOpacity.Send(Value);
end;

function TSilhouetteEnhancementVolumeStyleNode.GetSilhouetteSharpness: Single;
begin
  Result := FdSilhouetteSharpness.Value;
end;

procedure TSilhouetteEnhancementVolumeStyleNode.SetSilhouetteSharpness(const Value: Single);
begin
  FdSilhouetteSharpness.Send(Value);
end;

function TSilhouetteEnhancementVolumeStyleNode.GetSurfaceNormals: TAbstractTexture3DNode;
begin
  if FdSurfaceNormals.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSurfaceNormals.Value)
  else
    Result := nil;
end;

procedure TSilhouetteEnhancementVolumeStyleNode.SetSurfaceNormals(const Value: TAbstractTexture3DNode);
begin
  FdSurfaceNormals.Send(Value);
end;

class function TSilhouetteEnhancementVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'SilhouetteEnhancementVolumeStyle';
end;

procedure TSilhouetteEnhancementVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdSilhouetteBoundaryOpacity := TSFFloat.Create(Self, True, 'silhouetteBoundaryOpacity', 0);
   FdSilhouetteBoundaryOpacity.ChangeAlways := chVisibleNonGeometry;
   FdSilhouetteBoundaryOpacity.MustBeNonnegative := true;
  AddField(FFdSilhouetteBoundaryOpacity);

  FFdSilhouetteRetainedOpacity := TSFFloat.Create(Self, True, 'silhouetteRetainedOpacity', 1);
   FdSilhouetteRetainedOpacity.ChangeAlways := chVisibleNonGeometry;
   FdSilhouetteRetainedOpacity.MustBeNonnegative := true;
  AddField(FFdSilhouetteRetainedOpacity);

  FFdSilhouetteSharpness := TSFFloat.Create(Self, True, 'silhouetteSharpness', 0.5);
   FdSilhouetteSharpness.ChangeAlways := chVisibleNonGeometry;
   FdSilhouetteSharpness.MustBeNonnegative := true;
  AddField(FFdSilhouetteSharpness);

  FFdSurfaceNormals := TSFNode.Create(Self, True, 'surfaceNormals', [TAbstractTexture3DNode]);
   FdSurfaceNormals.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceNormals);
end;

{$endif read_implementation}
