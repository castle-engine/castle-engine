{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetLighting: Boolean;
    procedure SetLighting(const Value: Boolean);
    function GetMaterial: TAbstractMaterialNode;
    procedure SetMaterial(const Value: TAbstractMaterialNode);
    function GetShadows: Boolean;
    procedure SetShadows(const Value: Boolean);
    function GetSurfaceNormals: TAbstractTexture3DNode;
    procedure SetSurfaceNormals(const Value: TAbstractTexture3DNode);
    function GetPhaseFunction: String;
    procedure SetPhaseFunction(const Value: String);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdLighting: TSFBool;
    { Internal wrapper for property @code(Lighting). This wrapper API may change, we advise to access simpler @code(Lighting) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdLighting: TSFBool read FFdLighting;
    {  }
    property Lighting: Boolean read GetLighting write SetLighting;

    strict private FFdMaterial: TSFNode;
    { Internal wrapper for property @code(Material). This wrapper API may change, we advise to access simpler @code(Material) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMaterial: TSFNode read FFdMaterial;
    {  }
    property Material: TAbstractMaterialNode read GetMaterial write SetMaterial;

    strict private FFdShadows: TSFBool;
    { Internal wrapper for property @code(Shadows). This wrapper API may change, we advise to access simpler @code(Shadows) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdShadows: TSFBool read FFdShadows;
    {  }
    property Shadows: Boolean read GetShadows write SetShadows;

    strict private FFdSurfaceNormals: TSFNode;
    { Internal wrapper for property @code(SurfaceNormals). This wrapper API may change, we advise to access simpler @code(SurfaceNormals) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceNormals: TSFNode read FFdSurfaceNormals;
    {  }
    property SurfaceNormals: TAbstractTexture3DNode read GetSurfaceNormals write SetSurfaceNormals;

    strict private FFdPhaseFunction: TSFString;
    { Internal wrapper for property @code(PhaseFunction). This wrapper API may change, we advise to access simpler @code(PhaseFunction) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdPhaseFunction: TSFString read FFdPhaseFunction;
    {  }
    property PhaseFunction: String read GetPhaseFunction write SetPhaseFunction;

{$endif read_interface}

{$ifdef read_implementation}

{ TShadedVolumeStyleNode ----------------------------------------------- }

function TShadedVolumeStyleNode.GetLighting: Boolean;
begin
  Result := FdLighting.Value;
end;

procedure TShadedVolumeStyleNode.SetLighting(const Value: Boolean);
begin
  FdLighting.Send(Value);
end;

function TShadedVolumeStyleNode.GetMaterial: TAbstractMaterialNode;
begin
  if FdMaterial.Value is TAbstractMaterialNode then
    Result := TAbstractMaterialNode(FdMaterial.Value)
  else
    Result := nil;
end;

procedure TShadedVolumeStyleNode.SetMaterial(const Value: TAbstractMaterialNode);
begin
  FdMaterial.Send(Value);
end;

function TShadedVolumeStyleNode.GetShadows: Boolean;
begin
  Result := FdShadows.Value;
end;

procedure TShadedVolumeStyleNode.SetShadows(const Value: Boolean);
begin
  FdShadows.Send(Value);
end;

function TShadedVolumeStyleNode.GetSurfaceNormals: TAbstractTexture3DNode;
begin
  if FdSurfaceNormals.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSurfaceNormals.Value)
  else
    Result := nil;
end;

procedure TShadedVolumeStyleNode.SetSurfaceNormals(const Value: TAbstractTexture3DNode);
begin
  FdSurfaceNormals.Send(Value);
end;

function TShadedVolumeStyleNode.GetPhaseFunction: String;
begin
  Result := FdPhaseFunction.Value;
end;

procedure TShadedVolumeStyleNode.SetPhaseFunction(const Value: String);
begin
  FdPhaseFunction.Send(Value);
end;

class function TShadedVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'ShadedVolumeStyle';
end;

procedure TShadedVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdLighting := TSFBool.Create(Self, True, 'lighting', false);
   FdLighting.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdLighting);

  FFdMaterial := TSFNode.Create(Self, True, 'material', [TAbstractMaterialNode]);
   FdMaterial.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdMaterial);

  FFdShadows := TSFBool.Create(Self, True, 'shadows', false);
   FdShadows.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdShadows);

  FFdSurfaceNormals := TSFNode.Create(Self, True, 'surfaceNormals', [TAbstractTexture3DNode]);
   FdSurfaceNormals.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceNormals);

  FFdPhaseFunction := TSFString.Create(Self, False, 'phaseFunction', 'Henyey-Greenstein');
   FdPhaseFunction.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdPhaseFunction);
end;

{$endif read_implementation}
