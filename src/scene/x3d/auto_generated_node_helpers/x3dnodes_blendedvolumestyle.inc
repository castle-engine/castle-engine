{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetRenderStyle: TAbstractComposableVolumeRenderStyleNode;
    procedure SetRenderStyle(const Value: TAbstractComposableVolumeRenderStyleNode);
    function GetVoxels: TAbstractTexture3DNode;
    procedure SetVoxels(const Value: TAbstractTexture3DNode);
    function GetWeightConstant1: Single;
    procedure SetWeightConstant1(const Value: Single);
    function GetWeightConstant2: Single;
    procedure SetWeightConstant2(const Value: Single);
    function GetWeightFunction1: TWeightFunction;
    procedure SetWeightFunction1(const Value: TWeightFunction);
    function GetWeightFunction2: TWeightFunction;
    procedure SetWeightFunction2(const Value: TWeightFunction);
    function GetWeightTransferFunction1: TAbstractTexture2DNode;
    procedure SetWeightTransferFunction1(const Value: TAbstractTexture2DNode);
    function GetWeightTransferFunction2: TAbstractTexture2DNode;
    procedure SetWeightTransferFunction2(const Value: TAbstractTexture2DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdRenderStyle: TSFNode;
    { Internal wrapper for property @code(RenderStyle). This wrapper API may change, we advise to access simpler @code(RenderStyle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRenderStyle: TSFNode read FFdRenderStyle;
    {  }
    property RenderStyle: TAbstractComposableVolumeRenderStyleNode read GetRenderStyle write SetRenderStyle;

    strict private FFdVoxels: TSFNode;
    { Internal wrapper for property @code(Voxels). This wrapper API may change, we advise to access simpler @code(Voxels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdVoxels: TSFNode read FFdVoxels;
    {  }
    property Voxels: TAbstractTexture3DNode read GetVoxels write SetVoxels;

    strict private FFdWeightConstant1: TSFFloat;
    { Internal wrapper for property @code(WeightConstant1). This wrapper API may change, we advise to access simpler @code(WeightConstant1) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightConstant1: TSFFloat read FFdWeightConstant1;
    {  }
    property WeightConstant1: Single read GetWeightConstant1 write SetWeightConstant1;

    strict private FFdWeightConstant2: TSFFloat;
    { Internal wrapper for property @code(WeightConstant2). This wrapper API may change, we advise to access simpler @code(WeightConstant2) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightConstant2: TSFFloat read FFdWeightConstant2;
    {  }
    property WeightConstant2: Single read GetWeightConstant2 write SetWeightConstant2;

    strict private FFdWeightFunction1: TSFStringEnum;
    { Internal wrapper for property @code(WeightFunction1). This wrapper API may change, we advise to access simpler @code(WeightFunction1) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightFunction1: TSFStringEnum read FFdWeightFunction1;
    {  }
    property WeightFunction1: TWeightFunction read GetWeightFunction1 write SetWeightFunction1;

    strict private FFdWeightFunction2: TSFStringEnum;
    { Internal wrapper for property @code(WeightFunction2). This wrapper API may change, we advise to access simpler @code(WeightFunction2) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightFunction2: TSFStringEnum read FFdWeightFunction2;
    {  }
    property WeightFunction2: TWeightFunction read GetWeightFunction2 write SetWeightFunction2;

    strict private FFdWeightTransferFunction1: TSFNode;
    { Internal wrapper for property @code(WeightTransferFunction1). This wrapper API may change, we advise to access simpler @code(WeightTransferFunction1) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightTransferFunction1: TSFNode read FFdWeightTransferFunction1;
    {  }
    property WeightTransferFunction1: TAbstractTexture2DNode read GetWeightTransferFunction1 write SetWeightTransferFunction1;

    strict private FFdWeightTransferFunction2: TSFNode;
    { Internal wrapper for property @code(WeightTransferFunction2). This wrapper API may change, we advise to access simpler @code(WeightTransferFunction2) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWeightTransferFunction2: TSFNode read FFdWeightTransferFunction2;
    {  }
    property WeightTransferFunction2: TAbstractTexture2DNode read GetWeightTransferFunction2 write SetWeightTransferFunction2;

{$endif read_interface}

{$ifdef read_implementation}

{ TBlendedVolumeStyleNode ----------------------------------------------- }

function TBlendedVolumeStyleNode.GetRenderStyle: TAbstractComposableVolumeRenderStyleNode;
begin
  if FdRenderStyle.Value is TAbstractComposableVolumeRenderStyleNode then
    Result := TAbstractComposableVolumeRenderStyleNode(FdRenderStyle.Value)
  else
    Result := nil;
end;

procedure TBlendedVolumeStyleNode.SetRenderStyle(const Value: TAbstractComposableVolumeRenderStyleNode);
begin
  FdRenderStyle.Send(Value);
end;

function TBlendedVolumeStyleNode.GetVoxels: TAbstractTexture3DNode;
begin
  if FdVoxels.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdVoxels.Value)
  else
    Result := nil;
end;

procedure TBlendedVolumeStyleNode.SetVoxels(const Value: TAbstractTexture3DNode);
begin
  FdVoxels.Send(Value);
end;

function TBlendedVolumeStyleNode.GetWeightConstant1: Single;
begin
  Result := FdWeightConstant1.Value;
end;

procedure TBlendedVolumeStyleNode.SetWeightConstant1(const Value: Single);
begin
  FdWeightConstant1.Send(Value);
end;

function TBlendedVolumeStyleNode.GetWeightConstant2: Single;
begin
  Result := FdWeightConstant2.Value;
end;

procedure TBlendedVolumeStyleNode.SetWeightConstant2(const Value: Single);
begin
  FdWeightConstant2.Send(Value);
end;

function TBlendedVolumeStyleNode.GetWeightFunction1: TWeightFunction;
begin
  Result := TWeightFunction(FdWeightFunction1.EnumValue);
end;

procedure TBlendedVolumeStyleNode.SetWeightFunction1(const Value: TWeightFunction);
begin
  FdWeightFunction1.SendEnumValue(Ord(Value));
end;

function TBlendedVolumeStyleNode.GetWeightFunction2: TWeightFunction;
begin
  Result := TWeightFunction(FdWeightFunction2.EnumValue);
end;

procedure TBlendedVolumeStyleNode.SetWeightFunction2(const Value: TWeightFunction);
begin
  FdWeightFunction2.SendEnumValue(Ord(Value));
end;

function TBlendedVolumeStyleNode.GetWeightTransferFunction1: TAbstractTexture2DNode;
begin
  if FdWeightTransferFunction1.Value is TAbstractTexture2DNode then
    Result := TAbstractTexture2DNode(FdWeightTransferFunction1.Value)
  else
    Result := nil;
end;

procedure TBlendedVolumeStyleNode.SetWeightTransferFunction1(const Value: TAbstractTexture2DNode);
begin
  FdWeightTransferFunction1.Send(Value);
end;

function TBlendedVolumeStyleNode.GetWeightTransferFunction2: TAbstractTexture2DNode;
begin
  if FdWeightTransferFunction2.Value is TAbstractTexture2DNode then
    Result := TAbstractTexture2DNode(FdWeightTransferFunction2.Value)
  else
    Result := nil;
end;

procedure TBlendedVolumeStyleNode.SetWeightTransferFunction2(const Value: TAbstractTexture2DNode);
begin
  FdWeightTransferFunction2.Send(Value);
end;

class function TBlendedVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'BlendedVolumeStyle';
end;

procedure TBlendedVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdRenderStyle := TSFNode.Create(Self, True, 'renderStyle', [TAbstractComposableVolumeRenderStyleNode]);
   FdRenderStyle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdRenderStyle);

  FFdVoxels := TSFNode.Create(Self, True, 'voxels', [TAbstractTexture3DNode]);
   FdVoxels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdVoxels);

  FFdWeightConstant1 := TSFFloat.Create(Self, True, 'weightConstant1', 0.5);
   FdWeightConstant1.ChangeAlways := chVisibleNonGeometry;
   FdWeightConstant1.MustBeNonnegative := true;
  AddField(FFdWeightConstant1);

  FFdWeightConstant2 := TSFFloat.Create(Self, True, 'weightConstant2', 0.5);
   FdWeightConstant2.ChangeAlways := chVisibleNonGeometry;
   FdWeightConstant2.MustBeNonnegative := true;
  AddField(FFdWeightConstant2);

  FFdWeightFunction1 := TSFStringEnum.Create(Self, True, 'weightFunction1', @WeightFunctionNames, Ord(High(WeightFunctionNames)) + 1, Ord(wfConstant));
   FdWeightFunction1.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWeightFunction1);

  FFdWeightFunction2 := TSFStringEnum.Create(Self, True, 'weightFunction2', @WeightFunctionNames, Ord(High(WeightFunctionNames)) + 1, Ord(wfConstant));
   FdWeightFunction2.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWeightFunction2);

  FFdWeightTransferFunction1 := TSFNode.Create(Self, True, 'weightTransferFunction1', [TAbstractTexture2DNode]);
   FdWeightTransferFunction1.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWeightTransferFunction1);

  FFdWeightTransferFunction2 := TSFNode.Create(Self, True, 'weightTransferFunction2', [TAbstractTexture2DNode]);
   FdWeightTransferFunction2.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWeightTransferFunction2);
end;

{$endif read_implementation}
