{ -*- buffer-read-only: t -*-

  Copyright 2015-2023 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

    strict private FFdKeyValue: TMFBool;
    { Internal wrapper for property @link(KeyValue). This wrapper API may change, we advise to access simpler @link(KeyValue) instead. }
    public property FdKeyValue: TMFBool read FFdKeyValue;
    {  }
    procedure SetKeyValue(const Value: array of boolean); overload;
    {  }
    procedure SetKeyValue(const Value: TBooleanList); overload;

    strict private FEventValue_changed: TSFBoolEvent;
    {  }
    public property EventValue_changed: TSFBoolEvent read FEventValue_changed;

{$endif read_interface}

{$ifdef read_implementation}

{ TBooleanSequencerNode ----------------------------------------------- }

procedure TBooleanSequencerNode.SetKeyValue(const Value: array of boolean);
begin
  FdKeyValue.Send(Value);
end;

procedure TBooleanSequencerNode.SetKeyValue(const Value: TBooleanList);
begin
  FdKeyValue.Send(Value);
end;

class function TBooleanSequencerNode.ClassX3DType: String;
begin
  Result := 'BooleanSequencer';
end;

procedure TBooleanSequencerNode.CreateNode;
begin
  inherited;

  FFdKeyValue := TMFBool.Create(Self, True, 'keyValue', []);
   FdKeyValue.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdKeyValue);

  FEventValue_changed := TSFBoolEvent.Create(Self, 'value_changed', false);
  AddEvent(FEventValue_changed);
end;

{$endif read_implementation}
