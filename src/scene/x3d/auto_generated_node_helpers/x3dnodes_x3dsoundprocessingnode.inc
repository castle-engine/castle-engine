{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetChannelCountMode: TChannelCountMode;
    procedure SetChannelCountMode(const Value: TChannelCountMode);
    function GetChannelInterpretation: TChannelInterpretation;
    procedure SetChannelInterpretation(const Value: TChannelInterpretation);
    function GetEnabled: Boolean;
    procedure SetEnabled(const Value: Boolean);
    function GetGain: Single;
    procedure SetGain(const Value: Single);
    function GetTailTime: TFloatTime;
    procedure SetTailTime(const Value: TFloatTime);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdChannelCountMode: TSFStringEnum;
    { Internal wrapper for property @code(ChannelCountMode). This wrapper API may change, we advise to access simpler @code(ChannelCountMode) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelCountMode: TSFStringEnum read FFdChannelCountMode;
    {  }
    property ChannelCountMode: TChannelCountMode read GetChannelCountMode write SetChannelCountMode;

    strict private FFdChannelInterpretation: TSFStringEnum;
    { Internal wrapper for property @code(ChannelInterpretation). This wrapper API may change, we advise to access simpler @code(ChannelInterpretation) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChannelInterpretation: TSFStringEnum read FFdChannelInterpretation;
    {  }
    property ChannelInterpretation: TChannelInterpretation read GetChannelInterpretation write SetChannelInterpretation;

    strict private FFdChildren: TMFNode;
    { Internal wrapper for property @code(Children). This wrapper API may change, we advise to access simpler @code(Children) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdChildren: TMFNode read FFdChildren;
    {  }
    procedure SetChildren(const Value: array of TX3DNode);

    strict private FFdEnabled: TSFBool;
    { Internal wrapper for property @code(Enabled). This wrapper API may change, we advise to access simpler @code(Enabled) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdEnabled: TSFBool read FFdEnabled;
    {  }
    property Enabled: Boolean read GetEnabled write SetEnabled;

    strict private FFdGain: TSFFloat;
    { Internal wrapper for property @code(Gain). This wrapper API may change, we advise to access simpler @code(Gain) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdGain: TSFFloat read FFdGain;
    {  }
    property Gain: Single read GetGain write SetGain;

    strict private FFdTailTime: TSFTime;
    { Internal wrapper for property @code(TailTime). This wrapper API may change, we advise to access simpler @code(TailTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdTailTime: TSFTime read FFdTailTime;
    {  }
    property TailTime: TFloatTime read GetTailTime write SetTailTime;

    strict private FEventChannelCount: TSFInt32Event;
    {  }
    public property EventChannelCount: TSFInt32Event read FEventChannelCount;

{$endif read_interface}

{$ifdef read_implementation}

{ TAbstractSoundProcessingNode ----------------------------------------------- }

function TAbstractSoundProcessingNode.GetChannelCountMode: TChannelCountMode;
begin
  Result := TChannelCountMode(FdChannelCountMode.EnumValue);
end;

procedure TAbstractSoundProcessingNode.SetChannelCountMode(const Value: TChannelCountMode);
begin
  FdChannelCountMode.SendEnumValue(Ord(Value));
end;

function TAbstractSoundProcessingNode.GetChannelInterpretation: TChannelInterpretation;
begin
  Result := TChannelInterpretation(FdChannelInterpretation.EnumValue);
end;

procedure TAbstractSoundProcessingNode.SetChannelInterpretation(const Value: TChannelInterpretation);
begin
  FdChannelInterpretation.SendEnumValue(Ord(Value));
end;

procedure TAbstractSoundProcessingNode.SetChildren(const Value: array of TX3DNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TX3DNode));
  FdChildren.Send(A);
end;

function TAbstractSoundProcessingNode.GetEnabled: Boolean;
begin
  Result := FdEnabled.Value;
end;

procedure TAbstractSoundProcessingNode.SetEnabled(const Value: Boolean);
begin
  FdEnabled.Send(Value);
end;

function TAbstractSoundProcessingNode.GetGain: Single;
begin
  Result := FdGain.Value;
end;

procedure TAbstractSoundProcessingNode.SetGain(const Value: Single);
begin
  FdGain.Send(Value);
end;

function TAbstractSoundProcessingNode.GetTailTime: TFloatTime;
begin
  Result := FdTailTime.Value;
end;

procedure TAbstractSoundProcessingNode.SetTailTime(const Value: TFloatTime);
begin
  FdTailTime.Send(Value);
end;

class function TAbstractSoundProcessingNode.ClassX3DType: String;
begin
  Result := 'X3DSoundProcessingNode';
end;

procedure TAbstractSoundProcessingNode.CreateNode;
begin
  inherited;

  FFdChannelCountMode := TSFStringEnum.Create(Self, True, 'channelCountMode', @ChannelCountModeNames, Ord(High(ChannelCountModeNames)) + 1, Ord(ccmMax));
   FdChannelCountMode.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelCountMode);

  FFdChannelInterpretation := TSFStringEnum.Create(Self, True, 'channelInterpretation', @ChannelInterpretationNames, Ord(High(ChannelInterpretationNames)) + 1, Ord(ciSpeakers));
   FdChannelInterpretation.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChannelInterpretation);

  FFdChildren := TMFNode.Create(Self, True, 'children', [TAbstractSoundChannelNode, TAbstractSoundProcessingNode, TAbstractSoundSourceNode]);
   FdChildren.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdChildren);

  FFdEnabled := TSFBool.Create(Self, True, 'enabled', true);
   FdEnabled.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdEnabled);

  FFdGain := TSFFloat.Create(Self, True, 'gain', 1);
   FdGain.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGain);

  FFdTailTime := TSFTime.Create(Self, True, 'tailTime', 0);
   FdTailTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdTailTime);

  FEventChannelCount := TSFInt32Event.Create(Self, 'channelCount', false);
  AddEvent(FEventChannelCount);
end;

{$endif read_implementation}
