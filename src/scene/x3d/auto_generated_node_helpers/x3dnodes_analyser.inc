{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetFftSize: Integer;
    procedure SetFftSize(const Value: Integer);
    function GetFrequencyBinCount: Integer;
    procedure SetFrequencyBinCount(const Value: Integer);
    function GetMinDecibels: Single;
    procedure SetMinDecibels(const Value: Single);
    function GetMaxDecibels: Single;
    procedure SetMaxDecibels(const Value: Single);
    function GetSmoothingTimeConstant: Single;
    procedure SetSmoothingTimeConstant(const Value: Single);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdFftSize: TSFInt32;
    { Internal wrapper for property @code(FftSize). This wrapper API may change, we advise to access simpler @code(FftSize) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdFftSize: TSFInt32 read FFdFftSize;
    {  }
    property FftSize: Integer read GetFftSize write SetFftSize;

    strict private FFdFrequencyBinCount: TSFInt32;
    { Internal wrapper for property @code(FrequencyBinCount). This wrapper API may change, we advise to access simpler @code(FrequencyBinCount) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdFrequencyBinCount: TSFInt32 read FFdFrequencyBinCount;
    {  }
    property FrequencyBinCount: Integer read GetFrequencyBinCount write SetFrequencyBinCount;

    strict private FFdMinDecibels: TSFFloat;
    { Internal wrapper for property @code(MinDecibels). This wrapper API may change, we advise to access simpler @code(MinDecibels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMinDecibels: TSFFloat read FFdMinDecibels;
    {  }
    property MinDecibels: Single read GetMinDecibels write SetMinDecibels;

    strict private FFdMaxDecibels: TSFFloat;
    { Internal wrapper for property @code(MaxDecibels). This wrapper API may change, we advise to access simpler @code(MaxDecibels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMaxDecibels: TSFFloat read FFdMaxDecibels;
    {  }
    property MaxDecibels: Single read GetMaxDecibels write SetMaxDecibels;

    strict private FFdSmoothingTimeConstant: TSFFloat;
    { Internal wrapper for property @code(SmoothingTimeConstant). This wrapper API may change, we advise to access simpler @code(SmoothingTimeConstant) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSmoothingTimeConstant: TSFFloat read FFdSmoothingTimeConstant;
    {  }
    property SmoothingTimeConstant: Single read GetSmoothingTimeConstant write SetSmoothingTimeConstant;

{$endif read_interface}

{$ifdef read_implementation}

{ TAnalyserNode ----------------------------------------------- }

function TAnalyserNode.GetFftSize: Integer;
begin
  Result := FdFftSize.Value;
end;

procedure TAnalyserNode.SetFftSize(const Value: Integer);
begin
  FdFftSize.Send(Value);
end;

function TAnalyserNode.GetFrequencyBinCount: Integer;
begin
  Result := FdFrequencyBinCount.Value;
end;

procedure TAnalyserNode.SetFrequencyBinCount(const Value: Integer);
begin
  FdFrequencyBinCount.Send(Value);
end;

function TAnalyserNode.GetMinDecibels: Single;
begin
  Result := FdMinDecibels.Value;
end;

procedure TAnalyserNode.SetMinDecibels(const Value: Single);
begin
  FdMinDecibels.Send(Value);
end;

function TAnalyserNode.GetMaxDecibels: Single;
begin
  Result := FdMaxDecibels.Value;
end;

procedure TAnalyserNode.SetMaxDecibels(const Value: Single);
begin
  FdMaxDecibels.Send(Value);
end;

function TAnalyserNode.GetSmoothingTimeConstant: Single;
begin
  Result := FdSmoothingTimeConstant.Value;
end;

procedure TAnalyserNode.SetSmoothingTimeConstant(const Value: Single);
begin
  FdSmoothingTimeConstant.Send(Value);
end;

class function TAnalyserNode.ClassX3DType: String;
begin
  Result := 'Analyser';
end;

procedure TAnalyserNode.CreateNode;
begin
  inherited;

  FFdFftSize := TSFInt32.Create(Self, True, 'fftSize', 2048);
   FdFftSize.ChangeAlways := chVisibleNonGeometry;
   FdFftSize.MustBeNonnegative := true;
  AddField(FFdFftSize);

  FFdFrequencyBinCount := TSFInt32.Create(Self, True, 'frequencyBinCount', 1024);
   FdFrequencyBinCount.ChangeAlways := chVisibleNonGeometry;
   FdFrequencyBinCount.MustBeNonnegative := true;
  AddField(FFdFrequencyBinCount);

  FFdMinDecibels := TSFFloat.Create(Self, True, 'minDecibels', -100);
   FdMinDecibels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdMinDecibels);

  FFdMaxDecibels := TSFFloat.Create(Self, True, 'maxDecibels', -30);
   FdMaxDecibels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdMaxDecibels);

  FFdSmoothingTimeConstant := TSFFloat.Create(Self, True, 'smoothingTimeConstant', 0.8);
   FdSmoothingTimeConstant.ChangeAlways := chVisibleNonGeometry;
   FdSmoothingTimeConstant.MustBeNonnegative := true;
  AddField(FFdSmoothingTimeConstant);
end;

{$endif read_implementation}
