{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetDimensions: TVector3;
    procedure SetDimensions(const Value: TVector3);
    function GetBboxDisplay: Boolean;
    procedure SetBboxDisplay(const Value: Boolean);
    function GetVisible: Boolean;
    procedure SetVisible(const Value: Boolean);
    function GetBBox: TBox3D;
    procedure SetBBox(const Value: TBox3D);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdDimensions: TSFVec3f;
    { Internal wrapper for property @code(Dimensions). This wrapper API may change, we advise to access simpler @code(Dimensions) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDimensions: TSFVec3f read FFdDimensions;
    {  }
    property Dimensions: TVector3 read GetDimensions write SetDimensions;

    strict private FFdBboxDisplay: TSFBool;
    { Internal wrapper for property @code(BboxDisplay). This wrapper API may change, we advise to access simpler @code(BboxDisplay) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBboxDisplay: TSFBool read FFdBboxDisplay;
    {  }
    property BboxDisplay: Boolean read GetBboxDisplay write SetBboxDisplay;

    strict private FFdVisible: TSFBool;
    { Internal wrapper for property @code(Visible). This wrapper API may change, we advise to access simpler @code(Visible) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdVisible: TSFBool read FFdVisible;
    {  }
    property Visible: Boolean read GetVisible write SetVisible;

    strict private FFdBboxCenter: TSFVec3f;
    { Internal wrapper for property @code(BboxCenter). This wrapper API may change, we advise to access simpler @code(BboxCenter) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBboxCenter: TSFVec3f read FFdBboxCenter;
    {  }
    property BBox: TBox3D read GetBBox write SetBBox;

    strict private FFdBboxSize: TSFVec3f;
    { Internal wrapper for property @code(BboxSize). This wrapper API may change, we advise to access simpler @code(BboxSize) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBboxSize: TSFVec3f read FFdBboxSize;

{$endif read_interface}

{$ifdef read_implementation}

{ TAbstractVolumeDataNode ----------------------------------------------- }

function TAbstractVolumeDataNode.GetDimensions: TVector3;
begin
  Result := FdDimensions.Value;
end;

procedure TAbstractVolumeDataNode.SetDimensions(const Value: TVector3);
begin
  FdDimensions.Send(Value);
end;

function TAbstractVolumeDataNode.GetBboxDisplay: Boolean;
begin
  Result := FdBboxDisplay.Value;
end;

procedure TAbstractVolumeDataNode.SetBboxDisplay(const Value: Boolean);
begin
  FdBboxDisplay.Send(Value);
end;

function TAbstractVolumeDataNode.GetVisible: Boolean;
begin
  Result := FdVisible.Value;
end;

procedure TAbstractVolumeDataNode.SetVisible(const Value: Boolean);
begin
  FdVisible.Send(Value);
end;

function TAbstractVolumeDataNode.GetBBox: TBox3D;
begin
  Result := TBox3D.FromCenterSize(FdBBoxCenter.Value, FdBBoxSize.Value);
end;

procedure TAbstractVolumeDataNode.SetBBox(const Value: TBox3D);
var
  ValueCenter, ValueSize: TVector3;
begin
  Value.ToCenterSize(ValueCenter, ValueSize);
  FdBBoxCenter.Send(ValueCenter);
  FdBBoxSize.Send(ValueSize);
end;

class function TAbstractVolumeDataNode.ClassX3DType: String;
begin
  Result := 'X3DVolumeDataNode';
end;

procedure TAbstractVolumeDataNode.CreateNode;
begin
  inherited;

  FFdDimensions := TSFVec3f.Create(Self, True, 'dimensions', Vector3(1, 1, 1));
   FdDimensions.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdDimensions);

  FFdBboxDisplay := TSFBool.Create(Self, True, 'bboxDisplay', false);
   FdBboxDisplay.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBboxDisplay);

  FFdVisible := TSFBool.Create(Self, True, 'visible', true);
   FdVisible.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdVisible);

  FFdBboxCenter := TSFVec3f.Create(Self, False, 'bboxCenter', Vector3(0, 0, 0));
   FdBboxCenter.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBboxCenter);

  FFdBboxSize := TSFVec3f.Create(Self, False, 'bboxSize', Vector3(-1, -1, -1));
   FdBboxSize.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBboxSize);
end;

{$endif read_implementation}
