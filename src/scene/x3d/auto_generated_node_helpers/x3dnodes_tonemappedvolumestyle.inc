{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetCoolColor: TCastleColor;
    procedure SetCoolColor(const Value: TCastleColor);
    function GetSurfaceNormals: TAbstractTexture3DNode;
    procedure SetSurfaceNormals(const Value: TAbstractTexture3DNode);
    function GetWarmColor: TCastleColor;
    procedure SetWarmColor(const Value: TCastleColor);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdCoolColor: TSFColorRGBA;
    { Internal wrapper for property @code(CoolColor). This wrapper API may change, we advise to access simpler @code(CoolColor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdCoolColor: TSFColorRGBA read FFdCoolColor;
    {  }
    property CoolColor: TCastleColor read GetCoolColor write SetCoolColor;

    strict private FFdSurfaceNormals: TSFNode;
    { Internal wrapper for property @code(SurfaceNormals). This wrapper API may change, we advise to access simpler @code(SurfaceNormals) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceNormals: TSFNode read FFdSurfaceNormals;
    {  }
    property SurfaceNormals: TAbstractTexture3DNode read GetSurfaceNormals write SetSurfaceNormals;

    strict private FFdWarmColor: TSFColorRGBA;
    { Internal wrapper for property @code(WarmColor). This wrapper API may change, we advise to access simpler @code(WarmColor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdWarmColor: TSFColorRGBA read FFdWarmColor;
    {  }
    property WarmColor: TCastleColor read GetWarmColor write SetWarmColor;

{$endif read_interface}

{$ifdef read_implementation}

{ TToneMappedVolumeStyleNode ----------------------------------------------- }

function TToneMappedVolumeStyleNode.GetCoolColor: TCastleColor;
begin
  Result := FdCoolColor.Value;
end;

procedure TToneMappedVolumeStyleNode.SetCoolColor(const Value: TCastleColor);
begin
  FdCoolColor.Send(Value);
end;

function TToneMappedVolumeStyleNode.GetSurfaceNormals: TAbstractTexture3DNode;
begin
  if FdSurfaceNormals.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSurfaceNormals.Value)
  else
    Result := nil;
end;

procedure TToneMappedVolumeStyleNode.SetSurfaceNormals(const Value: TAbstractTexture3DNode);
begin
  FdSurfaceNormals.Send(Value);
end;

function TToneMappedVolumeStyleNode.GetWarmColor: TCastleColor;
begin
  Result := FdWarmColor.Value;
end;

procedure TToneMappedVolumeStyleNode.SetWarmColor(const Value: TCastleColor);
begin
  FdWarmColor.Send(Value);
end;

class function TToneMappedVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'ToneMappedVolumeStyle';
end;

procedure TToneMappedVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdCoolColor := TSFColorRGBA.Create(Self, True, 'coolColor', Vector4(0, 0, 1, 0));
   FdCoolColor.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdCoolColor);

  FFdSurfaceNormals := TSFNode.Create(Self, True, 'surfaceNormals', [TAbstractTexture3DNode]);
   FdSurfaceNormals.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceNormals);

  FFdWarmColor := TSFColorRGBA.Create(Self, True, 'warmColor', Vector4(1, 1, 0, 0));
   FdWarmColor.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdWarmColor);
end;

{$endif read_implementation}
