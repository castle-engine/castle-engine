{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetContourStepSize: Single;
    procedure SetContourStepSize(const Value: Single);
    function GetGradients: TAbstractTexture3DNode;
    procedure SetGradients(const Value: TAbstractTexture3DNode);
    function GetSurfaceTolerance: Single;
    procedure SetSurfaceTolerance(const Value: Single);
    function GetVoxels: TAbstractTexture3DNode;
    procedure SetVoxels(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdContourStepSize: TSFFloat;
    { Internal wrapper for property @code(ContourStepSize). This wrapper API may change, we advise to access simpler @code(ContourStepSize) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdContourStepSize: TSFFloat read FFdContourStepSize;
    {  }
    property ContourStepSize: Single read GetContourStepSize write SetContourStepSize;

    strict private FFdGradients: TSFNode;
    { Internal wrapper for property @code(Gradients). This wrapper API may change, we advise to access simpler @code(Gradients) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdGradients: TSFNode read FFdGradients;
    {  }
    property Gradients: TAbstractTexture3DNode read GetGradients write SetGradients;

    strict private FFdRenderStyle: TMFNode;
    { Internal wrapper for property @code(RenderStyle). This wrapper API may change, we advise to access simpler @code(RenderStyle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRenderStyle: TMFNode read FFdRenderStyle;
    {  }
    procedure SetRenderStyle(const Value: array of TAbstractVolumeRenderStyleNode);

    strict private FFdSurfaceTolerance: TSFFloat;
    { Internal wrapper for property @code(SurfaceTolerance). This wrapper API may change, we advise to access simpler @code(SurfaceTolerance) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceTolerance: TSFFloat read FFdSurfaceTolerance;
    {  }
    property SurfaceTolerance: Single read GetSurfaceTolerance write SetSurfaceTolerance;

    strict private FFdSurfaceValues: TMFFloat;
    { Internal wrapper for property @code(SurfaceValues). This wrapper API may change, we advise to access simpler @code(SurfaceValues) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceValues: TMFFloat read FFdSurfaceValues;
    {  }
    procedure SetSurfaceValues(const Value: array of Single); overload;
    {  }
    procedure SetSurfaceValues(const Value: TSingleList); overload;

    strict private FFdVoxels: TSFNode;
    { Internal wrapper for property @code(Voxels). This wrapper API may change, we advise to access simpler @code(Voxels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdVoxels: TSFNode read FFdVoxels;
    {  }
    property Voxels: TAbstractTexture3DNode read GetVoxels write SetVoxels;

{$endif read_interface}

{$ifdef read_implementation}

{ TIsoSurfaceVolumeDataNode ----------------------------------------------- }

function TIsoSurfaceVolumeDataNode.GetContourStepSize: Single;
begin
  Result := FdContourStepSize.Value;
end;

procedure TIsoSurfaceVolumeDataNode.SetContourStepSize(const Value: Single);
begin
  FdContourStepSize.Send(Value);
end;

function TIsoSurfaceVolumeDataNode.GetGradients: TAbstractTexture3DNode;
begin
  if FdGradients.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdGradients.Value)
  else
    Result := nil;
end;

procedure TIsoSurfaceVolumeDataNode.SetGradients(const Value: TAbstractTexture3DNode);
begin
  FdGradients.Send(Value);
end;

procedure TIsoSurfaceVolumeDataNode.SetRenderStyle(const Value: array of TAbstractVolumeRenderStyleNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractVolumeRenderStyleNode));
  FdRenderStyle.Send(A);
end;

function TIsoSurfaceVolumeDataNode.GetSurfaceTolerance: Single;
begin
  Result := FdSurfaceTolerance.Value;
end;

procedure TIsoSurfaceVolumeDataNode.SetSurfaceTolerance(const Value: Single);
begin
  FdSurfaceTolerance.Send(Value);
end;

procedure TIsoSurfaceVolumeDataNode.SetSurfaceValues(const Value: array of Single);
begin
  FdSurfaceValues.Send(Value);
end;

procedure TIsoSurfaceVolumeDataNode.SetSurfaceValues(const Value: TSingleList);
begin
  FdSurfaceValues.Send(Value);
end;

function TIsoSurfaceVolumeDataNode.GetVoxels: TAbstractTexture3DNode;
begin
  if FdVoxels.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdVoxels.Value)
  else
    Result := nil;
end;

procedure TIsoSurfaceVolumeDataNode.SetVoxels(const Value: TAbstractTexture3DNode);
begin
  FdVoxels.Send(Value);
end;

class function TIsoSurfaceVolumeDataNode.ClassX3DType: String;
begin
  Result := 'IsoSurfaceVolumeData';
end;

procedure TIsoSurfaceVolumeDataNode.CreateNode;
begin
  inherited;

  FFdContourStepSize := TSFFloat.Create(Self, True, 'contourStepSize', 0);
   FdContourStepSize.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdContourStepSize);

  FFdGradients := TSFNode.Create(Self, True, 'gradients', [TAbstractTexture3DNode]);
   FdGradients.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdGradients);

  FFdRenderStyle := TMFNode.Create(Self, True, 'renderStyle', [TAbstractVolumeRenderStyleNode]);
   FdRenderStyle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdRenderStyle);

  FFdSurfaceTolerance := TSFFloat.Create(Self, True, 'surfaceTolerance', 0);
   FdSurfaceTolerance.ChangeAlways := chVisibleNonGeometry;
   FdSurfaceTolerance.MustBeNonnegative := true;
  AddField(FFdSurfaceTolerance);

  FFdSurfaceValues := TMFFloat.Create(Self, True, 'surfaceValues', []);
   FdSurfaceValues.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceValues);

  FFdVoxels := TSFNode.Create(Self, True, 'voxels', [TAbstractTexture3DNode]);
   FdVoxels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdVoxels);
end;

{$endif read_implementation}
