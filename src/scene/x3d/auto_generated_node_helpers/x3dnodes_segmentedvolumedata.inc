{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetSegmentIdentifiers: TAbstractTexture3DNode;
    procedure SetSegmentIdentifiers(const Value: TAbstractTexture3DNode);
    function GetVoxels: TAbstractTexture3DNode;
    procedure SetVoxels(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdRenderStyle: TMFNode;
    { Internal wrapper for property @code(RenderStyle). This wrapper API may change, we advise to access simpler @code(RenderStyle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRenderStyle: TMFNode read FFdRenderStyle;
    {  }
    procedure SetRenderStyle(const Value: array of TAbstractVolumeRenderStyleNode);

    strict private FFdSegmentEnabled: TMFBool;
    { Internal wrapper for property @code(SegmentEnabled). This wrapper API may change, we advise to access simpler @code(SegmentEnabled) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSegmentEnabled: TMFBool read FFdSegmentEnabled;
    {  }
    procedure SetSegmentEnabled(const Value: array of boolean); overload;
    {  }
    procedure SetSegmentEnabled(const Value: TBooleanList); overload;

    strict private FFdSegmentIdentifiers: TSFNode;
    { Internal wrapper for property @code(SegmentIdentifiers). This wrapper API may change, we advise to access simpler @code(SegmentIdentifiers) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSegmentIdentifiers: TSFNode read FFdSegmentIdentifiers;
    {  }
    property SegmentIdentifiers: TAbstractTexture3DNode read GetSegmentIdentifiers write SetSegmentIdentifiers;

    strict private FFdVoxels: TSFNode;
    { Internal wrapper for property @code(Voxels). This wrapper API may change, we advise to access simpler @code(Voxels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdVoxels: TSFNode read FFdVoxels;
    {  }
    property Voxels: TAbstractTexture3DNode read GetVoxels write SetVoxels;

{$endif read_interface}

{$ifdef read_implementation}

{ TSegmentedVolumeDataNode ----------------------------------------------- }

procedure TSegmentedVolumeDataNode.SetRenderStyle(const Value: array of TAbstractVolumeRenderStyleNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TAbstractVolumeRenderStyleNode));
  FdRenderStyle.Send(A);
end;

procedure TSegmentedVolumeDataNode.SetSegmentEnabled(const Value: array of boolean);
begin
  FdSegmentEnabled.Send(Value);
end;

procedure TSegmentedVolumeDataNode.SetSegmentEnabled(const Value: TBooleanList);
begin
  FdSegmentEnabled.Send(Value);
end;

function TSegmentedVolumeDataNode.GetSegmentIdentifiers: TAbstractTexture3DNode;
begin
  if FdSegmentIdentifiers.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSegmentIdentifiers.Value)
  else
    Result := nil;
end;

procedure TSegmentedVolumeDataNode.SetSegmentIdentifiers(const Value: TAbstractTexture3DNode);
begin
  FdSegmentIdentifiers.Send(Value);
end;

function TSegmentedVolumeDataNode.GetVoxels: TAbstractTexture3DNode;
begin
  if FdVoxels.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdVoxels.Value)
  else
    Result := nil;
end;

procedure TSegmentedVolumeDataNode.SetVoxels(const Value: TAbstractTexture3DNode);
begin
  FdVoxels.Send(Value);
end;

class function TSegmentedVolumeDataNode.ClassX3DType: String;
begin
  Result := 'SegmentedVolumeData';
end;

procedure TSegmentedVolumeDataNode.CreateNode;
begin
  inherited;

  FFdRenderStyle := TMFNode.Create(Self, True, 'renderStyle', [TAbstractVolumeRenderStyleNode]);
   FdRenderStyle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdRenderStyle);

  FFdSegmentEnabled := TMFBool.Create(Self, True, 'segmentEnabled', []);
   FdSegmentEnabled.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSegmentEnabled);

  FFdSegmentIdentifiers := TSFNode.Create(Self, True, 'segmentIdentifiers', [TAbstractTexture3DNode]);
   FdSegmentIdentifiers.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSegmentIdentifiers);

  FFdVoxels := TSFNode.Create(Self, True, 'voxels', [TAbstractTexture3DNode]);
   FdVoxels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdVoxels);
end;

{$endif read_implementation}
