{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetOversample: TOversample;
    procedure SetOversample(const Value: TOversample);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdCurve: TMFFloat;
    { Internal wrapper for property @code(Curve). This wrapper API may change, we advise to access simpler @code(Curve) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdCurve: TMFFloat read FFdCurve;
    {  }
    procedure SetCurve(const Value: array of Single); overload;
    {  }
    procedure SetCurve(const Value: TSingleList); overload;

    strict private FFdOversample: TSFStringEnum;
    { Internal wrapper for property @code(Oversample). This wrapper API may change, we advise to access simpler @code(Oversample) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdOversample: TSFStringEnum read FFdOversample;
    {  }
    property Oversample: TOversample read GetOversample write SetOversample;

{$endif read_interface}

{$ifdef read_implementation}

{ TWaveShaperNode ----------------------------------------------- }

procedure TWaveShaperNode.SetCurve(const Value: array of Single);
begin
  FdCurve.Send(Value);
end;

procedure TWaveShaperNode.SetCurve(const Value: TSingleList);
begin
  FdCurve.Send(Value);
end;

function TWaveShaperNode.GetOversample: TOversample;
begin
  Result := TOversample(FdOversample.EnumValue);
end;

procedure TWaveShaperNode.SetOversample(const Value: TOversample);
begin
  FdOversample.SendEnumValue(Ord(Value));
end;

class function TWaveShaperNode.ClassX3DType: String;
begin
  Result := 'WaveShaper';
end;

procedure TWaveShaperNode.CreateNode;
begin
  inherited;

  FFdCurve := TMFFloat.Create(Self, True, 'curve', []);
   FdCurve.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdCurve);

  FFdOversample := TSFStringEnum.Create(Self, True, 'oversample', @OversampleNames, Ord(High(OversampleNames)) + 1, Ord(osNone));
   FdOversample.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOversample);
end;

{$endif read_implementation}
