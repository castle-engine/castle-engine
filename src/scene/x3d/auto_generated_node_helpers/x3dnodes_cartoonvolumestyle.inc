{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetColorSteps: Integer;
    procedure SetColorSteps(const Value: Integer);
    function GetOrthogonalColor: TCastleColor;
    procedure SetOrthogonalColor(const Value: TCastleColor);
    function GetParallelColor: TCastleColor;
    procedure SetParallelColor(const Value: TCastleColor);
    function GetSurfaceNormals: TAbstractTexture3DNode;
    procedure SetSurfaceNormals(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdColorSteps: TSFInt32;
    { Internal wrapper for property @code(ColorSteps). This wrapper API may change, we advise to access simpler @code(ColorSteps) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdColorSteps: TSFInt32 read FFdColorSteps;
    {  }
    property ColorSteps: Integer read GetColorSteps write SetColorSteps;

    strict private FFdOrthogonalColor: TSFColorRGBA;
    { Internal wrapper for property @code(OrthogonalColor). This wrapper API may change, we advise to access simpler @code(OrthogonalColor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdOrthogonalColor: TSFColorRGBA read FFdOrthogonalColor;
    {  }
    property OrthogonalColor: TCastleColor read GetOrthogonalColor write SetOrthogonalColor;

    strict private FFdParallelColor: TSFColorRGBA;
    { Internal wrapper for property @code(ParallelColor). This wrapper API may change, we advise to access simpler @code(ParallelColor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdParallelColor: TSFColorRGBA read FFdParallelColor;
    {  }
    property ParallelColor: TCastleColor read GetParallelColor write SetParallelColor;

    strict private FFdSurfaceNormals: TSFNode;
    { Internal wrapper for property @code(SurfaceNormals). This wrapper API may change, we advise to access simpler @code(SurfaceNormals) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdSurfaceNormals: TSFNode read FFdSurfaceNormals;
    {  }
    property SurfaceNormals: TAbstractTexture3DNode read GetSurfaceNormals write SetSurfaceNormals;

{$endif read_interface}

{$ifdef read_implementation}

{ TCartoonVolumeStyleNode ----------------------------------------------- }

function TCartoonVolumeStyleNode.GetColorSteps: Integer;
begin
  Result := FdColorSteps.Value;
end;

procedure TCartoonVolumeStyleNode.SetColorSteps(const Value: Integer);
begin
  FdColorSteps.Send(Value);
end;

function TCartoonVolumeStyleNode.GetOrthogonalColor: TCastleColor;
begin
  Result := FdOrthogonalColor.Value;
end;

procedure TCartoonVolumeStyleNode.SetOrthogonalColor(const Value: TCastleColor);
begin
  FdOrthogonalColor.Send(Value);
end;

function TCartoonVolumeStyleNode.GetParallelColor: TCastleColor;
begin
  Result := FdParallelColor.Value;
end;

procedure TCartoonVolumeStyleNode.SetParallelColor(const Value: TCastleColor);
begin
  FdParallelColor.Send(Value);
end;

function TCartoonVolumeStyleNode.GetSurfaceNormals: TAbstractTexture3DNode;
begin
  if FdSurfaceNormals.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdSurfaceNormals.Value)
  else
    Result := nil;
end;

procedure TCartoonVolumeStyleNode.SetSurfaceNormals(const Value: TAbstractTexture3DNode);
begin
  FdSurfaceNormals.Send(Value);
end;

class function TCartoonVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'CartoonVolumeStyle';
end;

procedure TCartoonVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdColorSteps := TSFInt32.Create(Self, True, 'colorSteps', 4);
   FdColorSteps.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdColorSteps);

  FFdOrthogonalColor := TSFColorRGBA.Create(Self, True, 'orthogonalColor', Vector4(1, 1, 1, 1));
   FdOrthogonalColor.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOrthogonalColor);

  FFdParallelColor := TSFColorRGBA.Create(Self, True, 'parallelColor', Vector4(0, 0, 0, 1));
   FdParallelColor.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdParallelColor);

  FFdSurfaceNormals := TSFNode.Create(Self, True, 'surfaceNormals', [TAbstractTexture3DNode]);
   FdSurfaceNormals.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdSurfaceNormals);
end;

{$endif read_implementation}
