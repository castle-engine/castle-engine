{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetIntensityThreshold: Single;
    procedure SetIntensityThreshold(const Value: Single);
    function GetType: TProjectionVolumeType;
    procedure SetType(const Value: TProjectionVolumeType);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdIntensityThreshold: TSFFloat;
    { Internal wrapper for property @code(IntensityThreshold). This wrapper API may change, we advise to access simpler @code(IntensityThreshold) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdIntensityThreshold: TSFFloat read FFdIntensityThreshold;
    {  }
    property IntensityThreshold: Single read GetIntensityThreshold write SetIntensityThreshold;

    strict private FFdType: TSFStringEnum;
    { Internal wrapper for property @code(Type). This wrapper API may change, we advise to access simpler @code(Type) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdType: TSFStringEnum read FFdType;
    {  }
    property &Type: TProjectionVolumeType read GetType write SetType;

{$endif read_interface}

{$ifdef read_implementation}

{ TProjectionVolumeStyleNode ----------------------------------------------- }

function TProjectionVolumeStyleNode.GetIntensityThreshold: Single;
begin
  Result := FdIntensityThreshold.Value;
end;

procedure TProjectionVolumeStyleNode.SetIntensityThreshold(const Value: Single);
begin
  FdIntensityThreshold.Send(Value);
end;

function TProjectionVolumeStyleNode.GetType: TProjectionVolumeType;
begin
  Result := TProjectionVolumeType(FdType.EnumValue);
end;

procedure TProjectionVolumeStyleNode.SetType(const Value: TProjectionVolumeType);
begin
  FdType.SendEnumValue(Ord(Value));
end;

class function TProjectionVolumeStyleNode.ClassX3DType: String;
begin
  Result := 'ProjectionVolumeStyle';
end;

procedure TProjectionVolumeStyleNode.CreateNode;
begin
  inherited;

  FFdIntensityThreshold := TSFFloat.Create(Self, True, 'intensityThreshold', 0);
   FdIntensityThreshold.ChangeAlways := chVisibleNonGeometry;
   FdIntensityThreshold.MustBeNonnegative := true;
  AddField(FFdIntensityThreshold);

  FFdType := TSFStringEnum.Create(Self, True, 'type', @ProjectionVolumeTypeNames, Ord(High(ProjectionVolumeTypeNames)) + 1, Ord(ptMax));
   FdType.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdType);
end;

{$endif read_implementation}
