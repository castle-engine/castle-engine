{ -*- buffer-read-only: t -*-

  Copyright 2015-2023 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  public
    procedure CreateNode; override;
    class function ClassX3DType: string; override;

{$ifndef CASTLE_SLIM_NODES}
    strict private FEventSet_index: TMFInt32Event;
    {  }
    public property EventSet_index: TMFInt32Event read FEventSet_index;
{$endif not CASTLE_SLIM_NODES}

    strict private FFdIndex: TMFInt32;
    { Internal wrapper for property @link(Index). This wrapper API may change, we advise to access simpler @link(Index) instead. }
    public property FdIndex: TMFInt32 read FFdIndex;
    {  }
    procedure SetIndex(const Value: array of Int32); overload;
    {  }
    procedure SetIndex(const Value: TInt32List); overload;

{$endif read_interface}

{$ifdef read_implementation}

{ TIndexedQuadSetNode ----------------------------------------------- }

procedure TIndexedQuadSetNode.SetIndex(const Value: array of Int32);
begin
  FdIndex.Send(Value);
end;

procedure TIndexedQuadSetNode.SetIndex(const Value: TInt32List);
begin
  FdIndex.Send(Value);
end;

class function TIndexedQuadSetNode.ClassX3DType: String;
begin
  Result := 'IndexedQuadSet';
end;

procedure TIndexedQuadSetNode.CreateNode;
begin
  inherited;

{$ifndef CASTLE_SLIM_NODES}
  FEventSet_index := TMFInt32Event.Create(Self, 'set_index', true);
  AddEvent(FEventSet_index);
{$endif not CASTLE_SLIM_NODES}

  FFdIndex := TMFInt32.Create(Self, False, 'index', []);
   FdIndex.ChangeAlways := chGeometry;
  AddField(FFdIndex);
end;

{$endif read_implementation}
