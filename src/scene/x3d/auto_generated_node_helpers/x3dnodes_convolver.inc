{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetNormalize: Boolean;
    procedure SetNormalize(const Value: Boolean);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdBuffer: TMFFloat;
    { Internal wrapper for property @code(Buffer). This wrapper API may change, we advise to access simpler @code(Buffer) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBuffer: TMFFloat read FFdBuffer;
    {  }
    procedure SetBuffer(const Value: array of Single); overload;
    {  }
    procedure SetBuffer(const Value: TSingleList); overload;

    strict private FFdNormalize: TSFBool;
    { Internal wrapper for property @code(Normalize). This wrapper API may change, we advise to access simpler @code(Normalize) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdNormalize: TSFBool read FFdNormalize;
    {  }
    property Normalize: Boolean read GetNormalize write SetNormalize;

{$endif read_interface}

{$ifdef read_implementation}

{ TConvolverNode ----------------------------------------------- }

procedure TConvolverNode.SetBuffer(const Value: array of Single);
begin
  FdBuffer.Send(Value);
end;

procedure TConvolverNode.SetBuffer(const Value: TSingleList);
begin
  FdBuffer.Send(Value);
end;

function TConvolverNode.GetNormalize: Boolean;
begin
  Result := FdNormalize.Value;
end;

procedure TConvolverNode.SetNormalize(const Value: Boolean);
begin
  FdNormalize.Send(Value);
end;

class function TConvolverNode.ClassX3DType: String;
begin
  Result := 'Convolver';
end;

procedure TConvolverNode.CreateNode;
begin
  inherited;

  FFdBuffer := TMFFloat.Create(Self, True, 'buffer', []);
   FdBuffer.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdBuffer);

  FFdNormalize := TSFBool.Create(Self, True, 'normalize', false);
   FdNormalize.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdNormalize);
end;

{$endif read_implementation}
