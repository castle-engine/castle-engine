{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetAttack: TFloatTime;
    procedure SetAttack(const Value: TFloatTime);
    function GetKnee: Single;
    procedure SetKnee(const Value: Single);
    function GetRatio: Single;
    procedure SetRatio(const Value: Single);
    function GetRelease: TFloatTime;
    procedure SetRelease(const Value: TFloatTime);
    function GetThreshold: Single;
    procedure SetThreshold(const Value: Single);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdAttack: TSFTime;
    { Internal wrapper for property @code(Attack). This wrapper API may change, we advise to access simpler @code(Attack) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdAttack: TSFTime read FFdAttack;
    {  }
    property Attack: TFloatTime read GetAttack write SetAttack;

    strict private FFdKnee: TSFFloat;
    { Internal wrapper for property @code(Knee). This wrapper API may change, we advise to access simpler @code(Knee) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdKnee: TSFFloat read FFdKnee;
    {  }
    property Knee: Single read GetKnee write SetKnee;

    strict private FFdRatio: TSFFloat;
    { Internal wrapper for property @code(Ratio). This wrapper API may change, we advise to access simpler @code(Ratio) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRatio: TSFFloat read FFdRatio;
    {  }
    property Ratio: Single read GetRatio write SetRatio;

    strict private FFdRelease: TSFTime;
    { Internal wrapper for property @code(Release). This wrapper API may change, we advise to access simpler @code(Release) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRelease: TSFTime read FFdRelease;
    {  }
    property Release: TFloatTime read GetRelease write SetRelease;

    strict private FFdThreshold: TSFFloat;
    { Internal wrapper for property @code(Threshold). This wrapper API may change, we advise to access simpler @code(Threshold) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdThreshold: TSFFloat read FFdThreshold;
    {  }
    property Threshold: Single read GetThreshold write SetThreshold;

    strict private FEventReduction: TSFFloatEvent;
    {  }
    public property EventReduction: TSFFloatEvent read FEventReduction;

{$endif read_interface}

{$ifdef read_implementation}

{ TDynamicsCompressorNode ----------------------------------------------- }

function TDynamicsCompressorNode.GetAttack: TFloatTime;
begin
  Result := FdAttack.Value;
end;

procedure TDynamicsCompressorNode.SetAttack(const Value: TFloatTime);
begin
  FdAttack.Send(Value);
end;

function TDynamicsCompressorNode.GetKnee: Single;
begin
  Result := FdKnee.Value;
end;

procedure TDynamicsCompressorNode.SetKnee(const Value: Single);
begin
  FdKnee.Send(Value);
end;

function TDynamicsCompressorNode.GetRatio: Single;
begin
  Result := FdRatio.Value;
end;

procedure TDynamicsCompressorNode.SetRatio(const Value: Single);
begin
  FdRatio.Send(Value);
end;

function TDynamicsCompressorNode.GetRelease: TFloatTime;
begin
  Result := FdRelease.Value;
end;

procedure TDynamicsCompressorNode.SetRelease(const Value: TFloatTime);
begin
  FdRelease.Send(Value);
end;

function TDynamicsCompressorNode.GetThreshold: Single;
begin
  Result := FdThreshold.Value;
end;

procedure TDynamicsCompressorNode.SetThreshold(const Value: Single);
begin
  FdThreshold.Send(Value);
end;

class function TDynamicsCompressorNode.ClassX3DType: String;
begin
  Result := 'DynamicsCompressor';
end;

procedure TDynamicsCompressorNode.CreateNode;
begin
  inherited;

  FFdAttack := TSFTime.Create(Self, True, 'attack', 0.003);
   FdAttack.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdAttack);

  FFdKnee := TSFFloat.Create(Self, True, 'knee', 30);
   FdKnee.ChangeAlways := chVisibleNonGeometry;
   FdKnee.MustBeNonnegative := true;
  AddField(FFdKnee);

  FFdRatio := TSFFloat.Create(Self, True, 'ratio', 12);
   FdRatio.ChangeAlways := chVisibleNonGeometry;
   FdRatio.MustBeNonnegative := true;
  AddField(FFdRatio);

  FFdRelease := TSFTime.Create(Self, True, 'release', 0.25);
   FdRelease.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdRelease);

  FFdThreshold := TSFFloat.Create(Self, True, 'threshold', -24);
   FdThreshold.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdThreshold);

  FEventReduction := TSFFloatEvent.Create(Self, 'reduction', false);
  AddEvent(FEventReduction);
end;

{$endif read_implementation}
