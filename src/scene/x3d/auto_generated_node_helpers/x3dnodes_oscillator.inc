{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetDetune: Single;
    procedure SetDetune(const Value: Single);
    function GetFrequency: Single;
    procedure SetFrequency(const Value: Single);
    function GetPeriodicWave: TPeriodicWaveNode;
    procedure SetPeriodicWave(const Value: TPeriodicWaveNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdDetune: TSFFloat;
    { Internal wrapper for property @code(Detune). This wrapper API may change, we advise to access simpler @code(Detune) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDetune: TSFFloat read FFdDetune;
    {  }
    property Detune: Single read GetDetune write SetDetune;

    strict private FFdFrequency: TSFFloat;
    { Internal wrapper for property @code(Frequency). This wrapper API may change, we advise to access simpler @code(Frequency) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdFrequency: TSFFloat read FFdFrequency;
    {  }
    property Frequency: Single read GetFrequency write SetFrequency;

    strict private FFdPeriodicWave: TSFNode;
    { Internal wrapper for property @code(PeriodicWave). This wrapper API may change, we advise to access simpler @code(PeriodicWave) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdPeriodicWave: TSFNode read FFdPeriodicWave;
    {  }
    property PeriodicWave: TPeriodicWaveNode read GetPeriodicWave write SetPeriodicWave;

{$endif read_interface}

{$ifdef read_implementation}

{ TOscillatorNode ----------------------------------------------- }

function TOscillatorNode.GetDetune: Single;
begin
  Result := FdDetune.Value;
end;

procedure TOscillatorNode.SetDetune(const Value: Single);
begin
  FdDetune.Send(Value);
end;

function TOscillatorNode.GetFrequency: Single;
begin
  Result := FdFrequency.Value;
end;

procedure TOscillatorNode.SetFrequency(const Value: Single);
begin
  FdFrequency.Send(Value);
end;

function TOscillatorNode.GetPeriodicWave: TPeriodicWaveNode;
begin
  if FdPeriodicWave.Value is TPeriodicWaveNode then
    Result := TPeriodicWaveNode(FdPeriodicWave.Value)
  else
    Result := nil;
end;

procedure TOscillatorNode.SetPeriodicWave(const Value: TPeriodicWaveNode);
begin
  FdPeriodicWave.Send(Value);
end;

class function TOscillatorNode.ClassX3DType: String;
begin
  Result := 'Oscillator';
end;

procedure TOscillatorNode.CreateNode;
begin
  inherited;

  FFdDetune := TSFFloat.Create(Self, True, 'detune', 0);
   FdDetune.ChangeAlways := chVisibleNonGeometry;
   FdDetune.MustBeNonnegative := true;
  AddField(FFdDetune);

  FFdFrequency := TSFFloat.Create(Self, True, 'frequency', 440.0);
   FdFrequency.ChangeAlways := chVisibleNonGeometry;
   FdFrequency.MustBeNonnegative := true;
  AddField(FFdFrequency);

  FFdPeriodicWave := TSFNode.Create(Self, True, 'periodicWave', [TPeriodicWaveNode]);
   FdPeriodicWave.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdPeriodicWave);
end;

{$endif read_implementation}
