{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetRenderStyle: TAbstractVolumeRenderStyleNode;
    procedure SetRenderStyle(const Value: TAbstractVolumeRenderStyleNode);
    function GetVoxels: TAbstractTexture3DNode;
    procedure SetVoxels(const Value: TAbstractTexture3DNode);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdRenderStyle: TSFNode;
    { Internal wrapper for property @code(RenderStyle). This wrapper API may change, we advise to access simpler @code(RenderStyle) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdRenderStyle: TSFNode read FFdRenderStyle;
    {  }
    property RenderStyle: TAbstractVolumeRenderStyleNode read GetRenderStyle write SetRenderStyle;

    strict private FFdVoxels: TSFNode;
    { Internal wrapper for property @code(Voxels). This wrapper API may change, we advise to access simpler @code(Voxels) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdVoxels: TSFNode read FFdVoxels;
    {  }
    property Voxels: TAbstractTexture3DNode read GetVoxels write SetVoxels;

{$endif read_interface}

{$ifdef read_implementation}

{ TVolumeDataNode ----------------------------------------------- }

function TVolumeDataNode.GetRenderStyle: TAbstractVolumeRenderStyleNode;
begin
  if FdRenderStyle.Value is TAbstractVolumeRenderStyleNode then
    Result := TAbstractVolumeRenderStyleNode(FdRenderStyle.Value)
  else
    Result := nil;
end;

procedure TVolumeDataNode.SetRenderStyle(const Value: TAbstractVolumeRenderStyleNode);
begin
  FdRenderStyle.Send(Value);
end;

function TVolumeDataNode.GetVoxels: TAbstractTexture3DNode;
begin
  if FdVoxels.Value is TAbstractTexture3DNode then
    Result := TAbstractTexture3DNode(FdVoxels.Value)
  else
    Result := nil;
end;

procedure TVolumeDataNode.SetVoxels(const Value: TAbstractTexture3DNode);
begin
  FdVoxels.Send(Value);
end;

class function TVolumeDataNode.ClassX3DType: String;
begin
  Result := 'VolumeData';
end;

procedure TVolumeDataNode.CreateNode;
begin
  inherited;

  FFdRenderStyle := TSFNode.Create(Self, True, 'renderStyle', [TAbstractVolumeRenderStyleNode]);
   FdRenderStyle.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdRenderStyle);

  FFdVoxels := TSFNode.Create(Self, True, 'voxels', [TAbstractTexture3DNode]);
   FdVoxels.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdVoxels);
end;

{$endif read_implementation}
