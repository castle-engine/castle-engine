{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetDelayTime: TFloatTime;
    procedure SetDelayTime(const Value: TFloatTime);
    function GetMaxDelayTime: TFloatTime;
    procedure SetMaxDelayTime(const Value: TFloatTime);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdDelayTime: TSFTime;
    { Internal wrapper for property @code(DelayTime). This wrapper API may change, we advise to access simpler @code(DelayTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDelayTime: TSFTime read FFdDelayTime;
    {  }
    property DelayTime: TFloatTime read GetDelayTime write SetDelayTime;

    strict private FFdMaxDelayTime: TSFTime;
    { Internal wrapper for property @code(MaxDelayTime). This wrapper API may change, we advise to access simpler @code(MaxDelayTime) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdMaxDelayTime: TSFTime read FFdMaxDelayTime;
    {  }
    property MaxDelayTime: TFloatTime read GetMaxDelayTime write SetMaxDelayTime;

{$endif read_interface}

{$ifdef read_implementation}

{ TDelayNode ----------------------------------------------- }

function TDelayNode.GetDelayTime: TFloatTime;
begin
  Result := FdDelayTime.Value;
end;

procedure TDelayNode.SetDelayTime(const Value: TFloatTime);
begin
  FdDelayTime.Send(Value);
end;

function TDelayNode.GetMaxDelayTime: TFloatTime;
begin
  Result := FdMaxDelayTime.Value;
end;

procedure TDelayNode.SetMaxDelayTime(const Value: TFloatTime);
begin
  FdMaxDelayTime.Send(Value);
end;

class function TDelayNode.ClassX3DType: String;
begin
  Result := 'Delay';
end;

procedure TDelayNode.CreateNode;
begin
  inherited;

  FFdDelayTime := TSFTime.Create(Self, True, 'delayTime', 0);
   FdDelayTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdDelayTime);

  FFdMaxDelayTime := TSFTime.Create(Self, True, 'maxDelayTime', 1);
   FdMaxDelayTime.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdMaxDelayTime);
end;

{$endif read_implementation}
