{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdOutputs: TMFNode;
    { Internal wrapper for property @code(Outputs). This wrapper API may change, we advise to access simpler @code(Outputs) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdOutputs: TMFNode read FFdOutputs;
    {  }
    procedure SetOutputs(const Value: array of TX3DNode);

{$endif read_interface}

{$ifdef read_implementation}

{ TChannelSplitterNode ----------------------------------------------- }

procedure TChannelSplitterNode.SetOutputs(const Value: array of TX3DNode);
var
  L: Integer;
  A: array of TX3DNode;
begin
  L := High(Value) + 1;
  SetLength(A, L);
  if L > 0 then
    Move(Value[0], A[0], L * SizeOf(TX3DNode));
  FdOutputs.Send(A);
end;

class function TChannelSplitterNode.ClassX3DType: String;
begin
  Result := 'ChannelSplitter';
end;

procedure TChannelSplitterNode.CreateNode;
begin
  inherited;

  FFdOutputs := TMFNode.Create(Self, True, 'outputs', [TAbstractSoundChannelNode, TAbstractSoundProcessingNode, TAbstractSoundSourceNode]);
   FdOutputs.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOutputs);
end;

{$endif read_implementation}
