{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetType: TPeriodicWaveType;
    procedure SetType(const Value: TPeriodicWaveType);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdOptionsReal: TMFFloat;
    { Internal wrapper for property @code(OptionsReal). This wrapper API may change, we advise to access simpler @code(OptionsReal) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdOptionsReal: TMFFloat read FFdOptionsReal;
    {  }
    procedure SetOptionsReal(const Value: array of Single); overload;
    {  }
    procedure SetOptionsReal(const Value: TSingleList); overload;

    strict private FFdOptionsImag: TMFFloat;
    { Internal wrapper for property @code(OptionsImag). This wrapper API may change, we advise to access simpler @code(OptionsImag) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdOptionsImag: TMFFloat read FFdOptionsImag;
    {  }
    procedure SetOptionsImag(const Value: array of Single); overload;
    {  }
    procedure SetOptionsImag(const Value: TSingleList); overload;

    strict private FFdType: TSFStringEnum;
    { Internal wrapper for property @code(Type). This wrapper API may change, we advise to access simpler @code(Type) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdType: TSFStringEnum read FFdType;
    {  }
    property &Type: TPeriodicWaveType read GetType write SetType;

{$endif read_interface}

{$ifdef read_implementation}

{ TPeriodicWaveNode ----------------------------------------------- }

procedure TPeriodicWaveNode.SetOptionsReal(const Value: array of Single);
begin
  FdOptionsReal.Send(Value);
end;

procedure TPeriodicWaveNode.SetOptionsReal(const Value: TSingleList);
begin
  FdOptionsReal.Send(Value);
end;

procedure TPeriodicWaveNode.SetOptionsImag(const Value: array of Single);
begin
  FdOptionsImag.Send(Value);
end;

procedure TPeriodicWaveNode.SetOptionsImag(const Value: TSingleList);
begin
  FdOptionsImag.Send(Value);
end;

function TPeriodicWaveNode.GetType: TPeriodicWaveType;
begin
  Result := TPeriodicWaveType(FdType.EnumValue);
end;

procedure TPeriodicWaveNode.SetType(const Value: TPeriodicWaveType);
begin
  FdType.SendEnumValue(Ord(Value));
end;

class function TPeriodicWaveNode.ClassX3DType: String;
begin
  Result := 'PeriodicWave';
end;

procedure TPeriodicWaveNode.CreateNode;
begin
  inherited;

  FFdOptionsReal := TMFFloat.Create(Self, True, 'optionsReal', []);
   FdOptionsReal.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOptionsReal);

  FFdOptionsImag := TMFFloat.Create(Self, True, 'optionsImag', []);
   FdOptionsImag.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdOptionsImag);

  FFdType := TSFStringEnum.Create(Self, True, 'type', @PeriodicWaveTypeNames, Ord(High(PeriodicWaveTypeNames)) + 1, Ord(pwtSquare));
   FdType.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdType);
end;

{$endif read_implementation}
