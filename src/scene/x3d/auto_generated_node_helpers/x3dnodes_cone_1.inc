{ -*- buffer-read-only: t -*-

  Copyright 2015-2023 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetBottomRadius: Single;
    procedure SetBottomRadius(const Value: Single);
    function GetHeight: Single;
    procedure SetHeight(const Value: Single);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: string; override;
    class function ForVRMLVersion(const Version: TX3DVersion): Boolean; override;

    strict private FFdParts: TSFBitMask;
    { Internal wrapper for property @code(Parts). This wrapper API may change, we advise to access simpler @code(Parts) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdParts: TSFBitMask read FFdParts;

    strict private FFdBottomRadius: TSFFloat;
    { Internal wrapper for property @code(BottomRadius). This wrapper API may change, we advise to access simpler @code(BottomRadius) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdBottomRadius: TSFFloat read FFdBottomRadius;
    {  }
    property BottomRadius: Single read GetBottomRadius write SetBottomRadius;

    strict private FFdHeight: TSFFloat;
    { Internal wrapper for property @code(Height). This wrapper API may change, we advise to access simpler @code(Height) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdHeight: TSFFloat read FFdHeight;
    {  }
    property Height: Single read GetHeight write SetHeight;

{$endif read_interface}

{$ifdef read_implementation}

{ TConeNode_1 ----------------------------------------------- }

function TConeNode_1.GetBottomRadius: Single;
begin
  Result := FdBottomRadius.Value;
end;

procedure TConeNode_1.SetBottomRadius(const Value: Single);
begin
  FdBottomRadius.Send(Value);
end;

function TConeNode_1.GetHeight: Single;
begin
  Result := FdHeight.Value;
end;

procedure TConeNode_1.SetHeight(const Value: Single);
begin
  FdHeight.Send(Value);
end;

class function TConeNode_1.ForVRMLVersion(const Version: TX3DVersion): Boolean;
begin
  Result := Version.Major <= 1; // parse this node only in VRML 1.0 and Inventor files
end;

class function TConeNode_1.ClassX3DType: String;
begin
  Result := 'Cone';
end;

procedure TConeNode_1.CreateNode;
begin
  inherited;

  FFdParts := TSFBitMask.Create(Self, True, 'parts', ['SIDES', 'BOTTOM'], 'NONE', 'ALL', [true, true]);
   FdParts.ChangeAlways := chGeometry;
  AddField(FFdParts);

  FFdBottomRadius := TSFFloat.Create(Self, True, 'bottomRadius', 1);
   FdBottomRadius.ChangeAlways := chGeometry;
   FdBottomRadius.MustBeNonnegative := true;
  AddField(FFdBottomRadius);

  FFdHeight := TSFFloat.Create(Self, True, 'height', 2);
   FdHeight.ChangeAlways := chGeometry;
   FdHeight.MustBeNonnegative := true;
  AddField(FFdHeight);
end;

{$endif read_implementation}
