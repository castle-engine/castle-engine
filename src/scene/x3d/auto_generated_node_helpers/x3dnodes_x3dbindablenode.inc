{ -*- buffer-read-only: t -*-

  Copyright 2015-2024 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FEventSet_bind: TSFBoolEvent;
    {  }
    public property EventSet_bind: TSFBoolEvent read FEventSet_bind;

{$ifndef CASTLE_SLIM_NODES}
    strict private FEventBindTime: TSFTimeEvent;
    {  }
    public property EventBindTime: TSFTimeEvent read FEventBindTime;
{$endif not CASTLE_SLIM_NODES}

    strict private FEventIsBound: TSFBoolEvent;
    {  }
    public property EventIsBound: TSFBoolEvent read FEventIsBound;

{$endif read_interface}

{$ifdef read_implementation}

{ TAbstractBindableNode ----------------------------------------------- }

class function TAbstractBindableNode.ClassX3DType: String;
begin
  Result := 'X3DBindableNode';
end;

procedure TAbstractBindableNode.CreateNode;
begin
  inherited;

  FEventSet_bind := TSFBoolEvent.Create(Self, 'set_bind', true);
  AddEvent(FEventSet_bind);

{$ifndef CASTLE_SLIM_NODES}
  FEventBindTime := TSFTimeEvent.Create(Self, 'bindTime', false);
  AddEvent(FEventBindTime);
{$endif not CASTLE_SLIM_NODES}

  FEventIsBound := TSFBoolEvent.Create(Self, 'isBound', false);
  AddEvent(FEventIsBound);
end;

{$endif read_implementation}
