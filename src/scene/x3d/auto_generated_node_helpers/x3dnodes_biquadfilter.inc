{ -*- buffer-read-only: t -*-

  Copyright 2015-2025 Michalis Kamburelis.

  This file is part of "Castle Game Engine".

  "Castle Game Engine" is free software; see the file COPYING.txt,
  included in this distribution, for details about the copyright.

  "Castle Game Engine" is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  ----------------------------------------------------------------------------
}

{ Automatically generated node properties.

  Do not edit this file manually!
  To add new properties:
  - add them to the text files in tools/internal/x3d-nodes-to-pascal/nodes-specification/ ,
  - and regenerate include files by running x3d-nodes-to-pascal }

{$ifdef read_interface}

  strict private
    function GetDetune: Single;
    procedure SetDetune(const Value: Single);
    function GetFrequency: Single;
    procedure SetFrequency(const Value: Single);
    function GetQualityFactor: Single;
    procedure SetQualityFactor(const Value: Single);
    function GetType: TBiquadFilterType;
    procedure SetType(const Value: TBiquadFilterType);
  public
    { Create node fields and events. }
    procedure CreateNode; override;
    class function ClassX3DType: String; override;

    strict private FFdDetune: TSFFloat;
    { Internal wrapper for property @code(Detune). This wrapper API may change, we advise to access simpler @code(Detune) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdDetune: TSFFloat read FFdDetune;
    {  }
    property Detune: Single read GetDetune write SetDetune;

    strict private FFdFrequency: TSFFloat;
    { Internal wrapper for property @code(Frequency). This wrapper API may change, we advise to access simpler @code(Frequency) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdFrequency: TSFFloat read FFdFrequency;
    {  }
    property Frequency: Single read GetFrequency write SetFrequency;

    strict private FFdQualityFactor: TSFFloat;
    { Internal wrapper for property @code(QualityFactor). This wrapper API may change, we advise to access simpler @code(QualityFactor) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdQualityFactor: TSFFloat read FFdQualityFactor;
    {  }
    property QualityFactor: Single read GetQualityFactor write SetQualityFactor;

    strict private FFdType: TSFStringEnum;
    { Internal wrapper for property @code(Type). This wrapper API may change, we advise to access simpler @code(Type) instead, if it is defined (TODO: for now, some field types do not have a simpler counterpart). }
    public property FdType: TSFStringEnum read FFdType;
    {  }
    property &Type: TBiquadFilterType read GetType write SetType;

{$endif read_interface}

{$ifdef read_implementation}

{ TBiquadFilterNode ----------------------------------------------- }

function TBiquadFilterNode.GetDetune: Single;
begin
  Result := FdDetune.Value;
end;

procedure TBiquadFilterNode.SetDetune(const Value: Single);
begin
  FdDetune.Send(Value);
end;

function TBiquadFilterNode.GetFrequency: Single;
begin
  Result := FdFrequency.Value;
end;

procedure TBiquadFilterNode.SetFrequency(const Value: Single);
begin
  FdFrequency.Send(Value);
end;

function TBiquadFilterNode.GetQualityFactor: Single;
begin
  Result := FdQualityFactor.Value;
end;

procedure TBiquadFilterNode.SetQualityFactor(const Value: Single);
begin
  FdQualityFactor.Send(Value);
end;

function TBiquadFilterNode.GetType: TBiquadFilterType;
begin
  Result := TBiquadFilterType(FdType.EnumValue);
end;

procedure TBiquadFilterNode.SetType(const Value: TBiquadFilterType);
begin
  FdType.SendEnumValue(Ord(Value));
end;

class function TBiquadFilterNode.ClassX3DType: String;
begin
  Result := 'BiquadFilter';
end;

procedure TBiquadFilterNode.CreateNode;
begin
  inherited;

  FFdDetune := TSFFloat.Create(Self, True, 'detune', 0);
   FdDetune.ChangeAlways := chVisibleNonGeometry;
   FdDetune.MustBeNonnegative := true;
  AddField(FFdDetune);

  FFdFrequency := TSFFloat.Create(Self, True, 'frequency', 350);
   FdFrequency.ChangeAlways := chVisibleNonGeometry;
   FdFrequency.MustBeNonnegative := true;
  AddField(FFdFrequency);

  FFdQualityFactor := TSFFloat.Create(Self, True, 'qualityFactor', 1);
   FdQualityFactor.ChangeAlways := chVisibleNonGeometry;
   FdQualityFactor.MustBeNonnegative := true;
  AddField(FFdQualityFactor);

  FFdType := TSFStringEnum.Create(Self, True, 'type', @BiquadFilterTypeNames, Ord(High(BiquadFilterTypeNames)) + 1, Ord(bftLowpass));
   FdType.ChangeAlways := chVisibleNonGeometry;
  AddField(FFdType);
end;

{$endif read_implementation}
